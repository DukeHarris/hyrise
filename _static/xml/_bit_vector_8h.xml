<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.2">
  <compounddef id="_bit_vector_8h" kind="file">
    <compoundname>BitVector.h</compoundname>
    <innerclass refid="class_bit_vector" prot="public">BitVector</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="_bit_vector_8h_1a369ecd38b3ab077fc235f892354bb46f" prot="public" static="no">
        <name>BITS_PER_BYTE</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/grund/hyrise/src/lib/storage/BitVector.h" line="28" bodyfile="/home/grund/hyrise/src/lib/storage/BitVector.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2012<sp/>Hasso-Plattner-Institut<sp/>fuer<sp/>Softwaresystemtechnik<sp/>GmbH.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SRC_LIB_STORAGE_BITVECTOR_H_</highlight></codeline>
<codeline lineno="3"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>SRC_LIB_STORAGE_BITVECTOR_H_</highlight></codeline>
<codeline lineno="4"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/>USAGE:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/>BitVector<sp/>vector;</highlight></codeline>
<codeline lineno="10"><highlight class="comment"></highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/>vector.reserve(10);</highlight></codeline>
<codeline lineno="12"><highlight class="comment"></highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/>vector.set(4,<sp/>true);</highlight></codeline>
<codeline lineno="14"><highlight class="comment"></highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>vector.get(4)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>vector.get(5)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="17"><highlight class="comment"></highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline lineno="19"><highlight class="comment"></highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/><sp/>//<sp/>prints:</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/><sp/>1</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/><sp/>0</highlight></codeline>
<codeline lineno="24"><highlight class="comment"></highlight></codeline>
<codeline lineno="25"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BITS_PER_BYTE</highlight></codeline>
<codeline lineno="28" refid="_bit_vector_8h_1a369ecd38b3ab077fc235f892354bb46f" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>BITS_PER_BYTE<sp/>8</highlight></codeline>
<codeline lineno="29"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="30"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="class_bit_vector" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_bit_vector" kindref="compound">BitVector</ref><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="33" refid="class_bit_vector_1a4452aa6f56ca9da441800be14aa7d2c7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="class_bit_vector_1a4452aa6f56ca9da441800be14aa7d2c7" kindref="member">_values</ref>;</highlight></codeline>
<codeline lineno="34" refid="class_bit_vector_1aefcb91c32c45b99a38b4dddb4b1d5835" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_bit_vector_1aefcb91c32c45b99a38b4dddb4b1d5835" kindref="member">_allocated_bytes</ref>;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><ref refid="class_bit_vector_1a6a8e4243e01a015a77ef2ee04a9b6466" kindref="member">BitVector</ref>();</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">set</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_bit_vector_1ae7d896f3438cda7f3ffb1c7766a38969" kindref="member">reserve</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes);</highlight></codeline>
<codeline lineno="41"><highlight class="normal">};</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="class_bit_vector_1a6a8e4243e01a015a77ef2ee04a9b6466" refkind="member"><highlight class="normal"><ref refid="class_bit_vector_1a6a8e4243e01a015a77ef2ee04a9b6466" kindref="member">BitVector::BitVector</ref>()<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><ref refid="class_bit_vector_1a4452aa6f56ca9da441800be14aa7d2c7" kindref="member">_values</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><ref refid="class_bit_vector_1aefcb91c32c45b99a38b4dddb4b1d5835" kindref="member">_allocated_bytes</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="class_bit_vector_1ae678082aa0ee7bf3900d202a3f5af7c9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_bit_vector_1ae678082aa0ee7bf3900d202a3f5af7c9" kindref="member">BitVector::get</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>byte_offset<sp/>=<sp/>index<sp/>/<sp/><ref refid="_bit_vector_8h_1a369ecd38b3ab077fc235f892354bb46f" kindref="member">BITS_PER_BYTE</ref>;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bit_offset<sp/><sp/>=<sp/>index<sp/>%<sp/><ref refid="_bit_vector_8h_1a369ecd38b3ab077fc235f892354bb46f" kindref="member">BITS_PER_BYTE</ref>;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_bit_vector_1a4452aa6f56ca9da441800be14aa7d2c7" kindref="member">_values</ref>[byte_offset]<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>(7<sp/>-<sp/>bit_offset));</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="class_bit_vector_1a21e80d31eb35f0d64650b71985f550bf" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_bit_vector_1a21e80d31eb35f0d64650b71985f550bf" kindref="member">BitVector::set</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>byte_offset<sp/>=<sp/>index<sp/>/<sp/><ref refid="_bit_vector_8h_1a369ecd38b3ab077fc235f892354bb46f" kindref="member">BITS_PER_BYTE</ref>;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bit_offset<sp/><sp/>=<sp/>index<sp/>%<sp/><ref refid="_bit_vector_8h_1a369ecd38b3ab077fc235f892354bb46f" kindref="member">BITS_PER_BYTE</ref>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_bit_vector_1a4452aa6f56ca9da441800be14aa7d2c7" kindref="member">_values</ref>[byte_offset]<sp/>|=<sp/>1<sp/>&lt;&lt;<sp/>(7<sp/>-<sp/>bit_offset);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_bit_vector_1a4452aa6f56ca9da441800be14aa7d2c7" kindref="member">_values</ref>[byte_offset]<sp/>&amp;=<sp/>~(1<sp/>&lt;&lt;<sp/>(7<sp/>-<sp/>bit_offset));</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="class_bit_vector_1ae7d896f3438cda7f3ffb1c7766a38969" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_bit_vector_1ae7d896f3438cda7f3ffb1c7766a38969" kindref="member">BitVector::reserve</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*new_values<sp/>=<sp/>realloc(<ref refid="class_bit_vector_1a4452aa6f56ca9da441800be14aa7d2c7" kindref="member">_values</ref>,<sp/>bytes);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_values<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>free(<ref refid="class_bit_vector_1a4452aa6f56ca9da441800be14aa7d2c7" kindref="member">_values</ref>);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::bad_alloc();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes<sp/>&gt;<sp/><ref refid="class_bit_vector_1aefcb91c32c45b99a38b4dddb4b1d5835" kindref="member">_allocated_bytes</ref>)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(new_values<sp/>+<sp/><ref refid="class_bit_vector_1aefcb91c32c45b99a38b4dddb4b1d5835" kindref="member">_allocated_bytes</ref>,<sp/>0,<sp/>bytes<sp/>-<sp/><ref refid="class_bit_vector_1aefcb91c32c45b99a38b4dddb4b1d5835" kindref="member">_allocated_bytes</ref>);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><ref refid="class_bit_vector_1a4452aa6f56ca9da441800be14aa7d2c7" kindref="member">_values</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>new_values;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><ref refid="class_bit_vector_1aefcb91c32c45b99a38b4dddb4b1d5835" kindref="member">_allocated_bytes</ref><sp/>=<sp/>bytes;</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>SRC_LIB_STORAGE_BITVECTOR_H_</highlight></codeline>
    </programlisting>
    <location file="/home/grund/hyrise/src/lib/storage/BitVector.h"/>
  </compounddef>
</doxygen>
