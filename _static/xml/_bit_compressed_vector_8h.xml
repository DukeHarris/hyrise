<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.2">
  <compounddef id="_bit_compressed_vector_8h" kind="file">
    <compoundname>BitCompressedVector.h</compoundname>
    <includes local="no">math.h</includes>
    <includes local="no">stdint.h</includes>
    <includes local="no">cstring</includes>
    <includes local="no">mutex</includes>
    <includes local="no">string</includes>
    <includes local="no">stdexcept</includes>
    <includes refid="_abstract_attribute_vector_8h" local="no">storage/AbstractAttributeVector.h</includes>
    <includes refid="_base_attribute_vector_8h" local="no">storage/BaseAttributeVector.h</includes>
    <includedby refid="_attribute_vector_factory_8h" local="no">src/lib/storage/AttributeVectorFactory.h</includedby>
    <incdepgraph>
      <node id="19079">
        <label>stdint.h</label>
      </node>
      <node id="19083">
        <label>stdexcept</label>
      </node>
      <node id="19082">
        <label>string</label>
      </node>
      <node id="19078">
        <label>math.h</label>
      </node>
      <node id="19084">
        <label>storage/AbstractAttributeVector.h</label>
        <link refid="_abstract_attribute_vector_8h"/>
      </node>
      <node id="19081">
        <label>mutex</label>
      </node>
      <node id="19077">
        <label>src/lib/storage/BitCompressedVector.h</label>
        <link refid="BitCompressedVector.h"/>
        <childnode refid="19078" relation="include">
        </childnode>
        <childnode refid="19079" relation="include">
        </childnode>
        <childnode refid="19080" relation="include">
        </childnode>
        <childnode refid="19081" relation="include">
        </childnode>
        <childnode refid="19082" relation="include">
        </childnode>
        <childnode refid="19083" relation="include">
        </childnode>
        <childnode refid="19084" relation="include">
        </childnode>
        <childnode refid="19085" relation="include">
        </childnode>
      </node>
      <node id="19085">
        <label>storage/BaseAttributeVector.h</label>
        <link refid="_base_attribute_vector_8h"/>
        <childnode refid="19086" relation="include">
        </childnode>
        <childnode refid="19083" relation="include">
        </childnode>
        <childnode refid="19084" relation="include">
        </childnode>
      </node>
      <node id="19080">
        <label>cstring</label>
      </node>
      <node id="19086">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="19144">
        <label>src/lib/storage.h</label>
        <link refid="storage_8h"/>
        <childnode refid="19105" relation="include">
        </childnode>
        <childnode refid="19106" relation="include">
        </childnode>
        <childnode refid="19107" relation="include">
        </childnode>
        <childnode refid="19108" relation="include">
        </childnode>
        <childnode refid="19109" relation="include">
        </childnode>
        <childnode refid="19110" relation="include">
        </childnode>
        <childnode refid="19111" relation="include">
        </childnode>
        <childnode refid="19112" relation="include">
        </childnode>
      </node>
      <node id="19151">
        <label>src/lib/io/shortcuts.cpp</label>
        <link refid="shortcuts_8cpp"/>
      </node>
      <node id="19146">
        <label>src/lib/access/InsertScan.cpp</label>
        <link refid="_insert_scan_8cpp"/>
      </node>
      <node id="19092">
        <label>src/lib/access/Layouter.cpp</label>
        <link refid="_layouter_8cpp"/>
      </node>
      <node id="19152">
        <label>src/lib/storage/Store.cpp</label>
        <link refid="_store_8cpp"/>
      </node>
      <node id="19139">
        <label>src/lib/storage/PointerCalculator.cpp</label>
        <link refid="_pointer_calculator_8cpp"/>
      </node>
      <node id="19155">
        <label>src/lib/storage/Table.cpp</label>
        <link refid="_table_8cpp"/>
      </node>
      <node id="19157">
        <label>src/lib/storage/TableFactory.cpp</label>
        <link refid="_table_factory_8cpp"/>
      </node>
      <node id="19095">
        <label>src/lib/access/SortScan.cpp</label>
        <link refid="lib_2access_2_sort_scan_8cpp"/>
      </node>
      <node id="19159">
        <label>src/lib/storage/TableGenerator.h</label>
        <link refid="_table_generator_8h"/>
        <childnode refid="19119" relation="include">
        </childnode>
        <childnode refid="19160" relation="include">
        </childnode>
        <childnode refid="19154" relation="include">
        </childnode>
        <childnode refid="19161" relation="include">
        </childnode>
        <childnode refid="19144" relation="include">
        </childnode>
      </node>
      <node id="19125">
        <label>src/lib/access/HashJoinProbe.cpp</label>
        <link refid="_hash_join_probe_8cpp"/>
      </node>
      <node id="19094">
        <label>src/lib/access/PrefixSum.cpp</label>
        <link refid="_prefix_sum_8cpp"/>
      </node>
      <node id="19149">
        <label>src/lib/access/UpdateScan.cpp</label>
        <link refid="_update_scan_8cpp"/>
      </node>
      <node id="19102">
        <label>src/lib/storage/MutableVerticalTable.h</label>
        <link refid="_mutable_vertical_table_8h"/>
        <childnode refid="19091" relation="include">
        </childnode>
        <childnode refid="19103" relation="include">
        </childnode>
        <childnode refid="19113" relation="include">
        </childnode>
        <childnode refid="19115" relation="include">
        </childnode>
        <childnode refid="19116" relation="include">
        </childnode>
        <childnode refid="19117" relation="include">
        </childnode>
        <childnode refid="19118" relation="include">
        </childnode>
        <childnode refid="19119" relation="include">
        </childnode>
        <childnode refid="19096" relation="include">
        </childnode>
        <childnode refid="19120" relation="include">
        </childnode>
        <childnode refid="19121" relation="include">
        </childnode>
        <childnode refid="19140" relation="include">
        </childnode>
        <childnode refid="19145" relation="include">
        </childnode>
        <childnode refid="19153" relation="include">
        </childnode>
        <childnode refid="19154" relation="include">
        </childnode>
        <childnode refid="19144" relation="include">
        </childnode>
      </node>
      <node id="19138">
        <label>src/lib/access/TableScan.cpp</label>
        <link refid="_table_scan_8cpp"/>
      </node>
      <node id="19120">
        <label>src/lib/storage/MutableVerticalTable.cpp</label>
        <link refid="_mutable_vertical_table_8cpp"/>
      </node>
      <node id="19113">
        <label>src/lib/access/MultiplyRefField.h</label>
        <link refid="_multiply_ref_field_8h"/>
        <childnode refid="19114" relation="include">
        </childnode>
      </node>
      <node id="19101">
        <label>src/lib/storage/HorizontalTable.cpp</label>
        <link refid="_horizontal_table_8cpp"/>
      </node>
      <node id="19088">
        <label>src/lib/storage/AttributeVectorFactory.h</label>
        <link refid="_attribute_vector_factory_8h"/>
        <childnode refid="19089" relation="include">
        </childnode>
        <childnode refid="19090" relation="include">
        </childnode>
      </node>
      <node id="19112">
        <label>src/bin/perf_regression/UnionScan.cpp</label>
        <link refid="bin_2perf__regression_2_union_scan_8cpp"/>
      </node>
      <node id="19103">
        <label>src/lib/access/MergeJoin.hpp</label>
        <link refid="_merge_join_8hpp"/>
        <childnode refid="19104" relation="include">
        </childnode>
      </node>
      <node id="19127">
        <label>src/lib/access/Histogram.cpp</label>
        <link refid="_histogram_8cpp"/>
      </node>
      <node id="19128">
        <label>src/lib/access/RadixCluster.h</label>
        <link refid="_radix_cluster_8h"/>
        <childnode refid="19116" relation="include">
        </childnode>
      </node>
      <node id="19116">
        <label>src/lib/access/RadixCluster.cpp</label>
        <link refid="_radix_cluster_8cpp"/>
      </node>
      <node id="19142">
        <label>src/lib/io/TableDump.cpp</label>
        <link refid="_table_dump_8cpp"/>
      </node>
      <node id="19117">
        <label>src/lib/access/ScriptOperation.cpp</label>
        <link refid="_script_operation_8cpp"/>
      </node>
      <node id="19124">
        <label>src/lib/access/GroupByScan.cpp</label>
        <link refid="lib_2access_2_group_by_scan_8cpp"/>
      </node>
      <node id="19114">
        <label>src/lib/access/MultiplyRefField.cpp</label>
        <link refid="_multiply_ref_field_8cpp"/>
      </node>
      <node id="19108">
        <label>src/bin/perf_regression/JoinScan.cpp</label>
        <link refid="bin_2perf__regression_2_join_scan_8cpp"/>
      </node>
      <node id="19140">
        <label>src/lib/storage/PointerCalculatorFactory.cpp</label>
        <link refid="_pointer_calculator_factory_8cpp"/>
      </node>
      <node id="19136">
        <label>src/lib/access/ProjectionScan.cpp</label>
        <link refid="lib_2access_2_projection_scan_8cpp"/>
      </node>
      <node id="19132">
        <label>src/lib/access/insertonly_merger.cpp</label>
        <link refid="insertonly__merger_8cpp"/>
      </node>
      <node id="19150">
        <label>src/lib/io/MPassCSVLoader.cpp</label>
        <link refid="_m_pass_c_s_v_loader_8cpp"/>
      </node>
      <node id="19115">
        <label>src/lib/access/NestedLoopEquiJoin.cpp</label>
        <link refid="_nested_loop_equi_join_8cpp"/>
      </node>
      <node id="19097">
        <label>src/lib/storage/GroupValue.cpp</label>
        <link refid="_group_value_8cpp"/>
      </node>
      <node id="19111">
        <label>src/bin/perf_regression/SortScan.cpp</label>
        <link refid="bin_2perf__regression_2_sort_scan_8cpp"/>
      </node>
      <node id="19119">
        <label>src/lib/io/Loader.cpp</label>
        <link refid="_loader_8cpp"/>
      </node>
      <node id="19145">
        <label>src/lib/storage/Store.h</label>
        <link refid="_store_8h"/>
        <childnode refid="19146" relation="include">
        </childnode>
        <childnode refid="19147" relation="include">
        </childnode>
        <childnode refid="19148" relation="include">
        </childnode>
        <childnode refid="19149" relation="include">
        </childnode>
        <childnode refid="19119" relation="include">
        </childnode>
        <childnode refid="19150" relation="include">
        </childnode>
        <childnode refid="19151" relation="include">
        </childnode>
        <childnode refid="19142" relation="include">
        </childnode>
        <childnode refid="19096" relation="include">
        </childnode>
        <childnode refid="19139" relation="include">
        </childnode>
        <childnode refid="19152" relation="include">
        </childnode>
        <childnode refid="19144" relation="include">
        </childnode>
      </node>
      <node id="19131">
        <label>src/lib/access/insertonly_valid.h</label>
        <link refid="insertonly__valid_8h"/>
        <childnode refid="19130" relation="include">
        </childnode>
        <childnode refid="19132" relation="include">
        </childnode>
      </node>
      <node id="19090">
        <label>src/lib/storage/Table.h</label>
        <link refid="_table_8h"/>
        <childnode refid="19091" relation="include">
        </childnode>
        <childnode refid="19092" relation="include">
        </childnode>
        <childnode refid="19093" relation="include">
        </childnode>
        <childnode refid="19094" relation="include">
        </childnode>
        <childnode refid="19095" relation="include">
        </childnode>
        <childnode refid="19096" relation="include">
        </childnode>
        <childnode refid="19097" relation="include">
        </childnode>
        <childnode refid="19098" relation="include">
        </childnode>
        <childnode refid="19102" relation="include">
        </childnode>
        <childnode refid="19155" relation="include">
        </childnode>
        <childnode refid="19153" relation="include">
        </childnode>
        <childnode refid="19156" relation="include">
        </childnode>
        <childnode refid="19158" relation="include">
        </childnode>
        <childnode refid="19144" relation="include">
        </childnode>
      </node>
      <node id="19126">
        <label>src/lib/access/Histogram.h</label>
        <link refid="_histogram_8h"/>
        <childnode refid="19127" relation="include">
        </childnode>
        <childnode refid="19094" relation="include">
        </childnode>
        <childnode refid="19128" relation="include">
        </childnode>
      </node>
      <node id="19105">
        <label>src/bin/perf_regression/GroupByScan.cpp</label>
        <link refid="bin_2perf__regression_2_group_by_scan_8cpp"/>
      </node>
      <node id="19109">
        <label>src/bin/perf_regression/ProjectionScan.cpp</label>
        <link refid="bin_2perf__regression_2_projection_scan_8cpp"/>
      </node>
      <node id="19098">
        <label>src/lib/storage/HorizontalTable.h</label>
        <link refid="_horizontal_table_8h"/>
        <childnode refid="19099" relation="include">
        </childnode>
        <childnode refid="19100" relation="include">
        </childnode>
        <childnode refid="19101" relation="include">
        </childnode>
      </node>
      <node id="19161">
        <label>src/lib/storage/TestDataGenerator.cpp</label>
        <link refid="_test_data_generator_8cpp"/>
      </node>
      <node id="19156">
        <label>src/lib/storage/TableFactory.h</label>
        <link refid="_table_factory_8h"/>
        <childnode refid="19119" relation="include">
        </childnode>
        <childnode refid="19102" relation="include">
        </childnode>
        <childnode refid="19157" relation="include">
        </childnode>
        <childnode refid="19144" relation="include">
        </childnode>
      </node>
      <node id="19130">
        <label>src/lib/access/insertonly.cpp</label>
        <link refid="insertonly_8cpp"/>
      </node>
      <node id="19143">
        <label>src/lib/storage/storage_types_helper.cpp</label>
        <link refid="storage__types__helper_8cpp"/>
      </node>
      <node id="19106">
        <label>src/bin/perf_regression/HashJoin.cpp</label>
        <link refid="_hash_join_8cpp"/>
      </node>
      <node id="19096">
        <label>src/lib/storage/AbstractTable.cpp</label>
        <link refid="_abstract_table_8cpp"/>
      </node>
      <node id="19100">
        <label>src/lib/access/UnionScan.cpp</label>
        <link refid="lib_2access_2_union_scan_8cpp"/>
      </node>
      <node id="19121">
        <label>src/lib/storage/PointerCalculator.h</label>
        <link refid="_pointer_calculator_8h"/>
        <childnode refid="19122" relation="include">
        </childnode>
        <childnode refid="19123" relation="include">
        </childnode>
        <childnode refid="19124" relation="include">
        </childnode>
        <childnode refid="19125" relation="include">
        </childnode>
        <childnode refid="19126" relation="include">
        </childnode>
        <childnode refid="19129" relation="include">
        </childnode>
        <childnode refid="19130" relation="include">
        </childnode>
        <childnode refid="19131" relation="include">
        </childnode>
        <childnode refid="19133" relation="include">
        </childnode>
        <childnode refid="19134" relation="include">
        </childnode>
        <childnode refid="19135" relation="include">
        </childnode>
        <childnode refid="19103" relation="include">
        </childnode>
        <childnode refid="19113" relation="include">
        </childnode>
        <childnode refid="19115" relation="include">
        </childnode>
        <childnode refid="19136" relation="include">
        </childnode>
        <childnode refid="19117" relation="include">
        </childnode>
        <childnode refid="19118" relation="include">
        </childnode>
        <childnode refid="19137" relation="include">
        </childnode>
        <childnode refid="19095" relation="include">
        </childnode>
        <childnode refid="19138" relation="include">
        </childnode>
        <childnode refid="19099" relation="include">
        </childnode>
        <childnode refid="19100" relation="include">
        </childnode>
        <childnode refid="19139" relation="include">
        </childnode>
        <childnode refid="19140" relation="include">
        </childnode>
        <childnode refid="19141" relation="include">
        </childnode>
        <childnode refid="19144" relation="include">
        </childnode>
      </node>
      <node id="19141">
        <label>src/lib/storage/storage_types_helper.h</label>
        <link refid="storage__types__helper_8h"/>
        <childnode refid="19142" relation="include">
        </childnode>
        <childnode refid="19096" relation="include">
        </childnode>
        <childnode refid="19097" relation="include">
        </childnode>
        <childnode refid="19143" relation="include">
        </childnode>
      </node>
      <node id="19118">
        <label>src/lib/access/SimpleRawTableScan.cpp</label>
        <link refid="_simple_raw_table_scan_8cpp"/>
      </node>
      <node id="19158">
        <label>src/lib/storage/TableGenerator-impl.h</label>
        <link refid="_table_generator-impl_8h"/>
        <childnode refid="19159" relation="include">
        </childnode>
      </node>
      <node id="19099">
        <label>src/lib/access/UnionAll.cpp</label>
        <link refid="_union_all_8cpp"/>
      </node>
      <node id="19107">
        <label>src/bin/perf_regression/HashValueJoin.cpp</label>
        <link refid="_hash_value_join_8cpp"/>
      </node>
      <node id="19147">
        <label>src/lib/access/LayoutTable.cpp</label>
        <link refid="_layout_table_8cpp"/>
      </node>
      <node id="19153">
        <label>src/lib/storage/TableBuilder.cpp</label>
        <link refid="_table_builder_8cpp"/>
      </node>
      <node id="19104">
        <label>src/lib/access.h</label>
        <link refid="access_8h"/>
        <childnode refid="19105" relation="include">
        </childnode>
        <childnode refid="19106" relation="include">
        </childnode>
        <childnode refid="19107" relation="include">
        </childnode>
        <childnode refid="19108" relation="include">
        </childnode>
        <childnode refid="19109" relation="include">
        </childnode>
        <childnode refid="19110" relation="include">
        </childnode>
        <childnode refid="19111" relation="include">
        </childnode>
        <childnode refid="19112" relation="include">
        </childnode>
      </node>
      <node id="19160">
        <label>src/lib/io/ValidityTableGeneration.cpp</label>
        <link refid="_validity_table_generation_8cpp"/>
      </node>
      <node id="19091">
        <label>src/lib/access/ExpressionScan.cpp</label>
        <link refid="_expression_scan_8cpp"/>
      </node>
      <node id="19154">
        <label>src/lib/storage/TableGenerator.cpp</label>
        <link refid="_table_generator_8cpp"/>
      </node>
      <node id="19110">
        <label>src/bin/perf_regression/SimpleTableScan.cpp</label>
        <link refid="bin_2perf__regression_2_simple_table_scan_8cpp"/>
      </node>
      <node id="19133">
        <label>src/lib/access/InsertOnlyOperators.cpp</label>
        <link refid="_insert_only_operators_8cpp"/>
      </node>
      <node id="19148">
        <label>src/lib/access/MergeTable.cpp</label>
        <link refid="_merge_table_8cpp"/>
      </node>
      <node id="19137">
        <label>src/lib/access/SimpleTableScan.cpp</label>
        <link refid="lib_2access_2_simple_table_scan_8cpp"/>
      </node>
      <node id="19089">
        <label>src/lib/storage/Table-impl.h</label>
        <link refid="_table-impl_8h"/>
        <childnode refid="19090" relation="include">
        </childnode>
      </node>
      <node id="19087">
        <label>src/lib/storage/BitCompressedVector.h</label>
        <link refid="BitCompressedVector.h"/>
        <childnode refid="19088" relation="include">
        </childnode>
      </node>
      <node id="19129">
        <label>src/lib/access/IndexScan.cpp</label>
        <link refid="_index_scan_8cpp"/>
      </node>
      <node id="19093">
        <label>src/lib/access/MaterializingScan.cpp</label>
        <link refid="_materializing_scan_8cpp"/>
      </node>
      <node id="19134">
        <label>src/lib/access/IntersectPositions.cpp</label>
        <link refid="_intersect_positions_8cpp"/>
      </node>
      <node id="19135">
        <label>src/lib/access/JoinScan.cpp</label>
        <link refid="lib_2access_2_join_scan_8cpp"/>
      </node>
      <node id="19123">
        <label>src/lib/access/Distinct.cpp</label>
        <link refid="_distinct_8cpp"/>
      </node>
      <node id="19122">
        <label>src/lib/access/CreateIndex.cpp</label>
        <link refid="_create_index_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="class_bit_compressed_vector" prot="public">BitCompressedVector</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="_bit_compressed_vector_8h_1a4c8b6e3f5b517ddc1b9f9670ea0ead8f" prot="public" static="no">
        <name>WORD_LENGTH</name>
        <initializer>64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/grund/hyrise/src/lib/storage/BitCompressedVector.h" line="17" bodyfile="/home/grund/hyrise/src/lib/storage/BitCompressedVector.h" bodystart="17" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2012<sp/>Hasso-Plattner-Institut<sp/>fuer<sp/>Softwaresystemtechnik<sp/>GmbH.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SRC_LIB_STORAGE_BITCOMPRESSEDVECTOR_H_</highlight></codeline>
<codeline lineno="3"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>SRC_LIB_STORAGE_BITCOMPRESSEDVECTOR_H_</highlight></codeline>
<codeline lineno="4"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;mutex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_abstract_attribute_vector_8h" kindref="compound">storage/AbstractAttributeVector.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_base_attribute_vector_8h" kindref="compound">storage/BaseAttributeVector.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>WORD_LENGTH</highlight></codeline>
<codeline lineno="17" refid="_bit_compressed_vector_8h_1a4c8b6e3f5b517ddc1b9f9670ea0ead8f" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>WORD_LENGTH<sp/>64</highlight></codeline>
<codeline lineno="18"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="19"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">BitCompressedVectorIterator;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/><sp/>can<sp/>only<sp/>save<sp/>positive<sp/>numbers</highlight></codeline>
<codeline lineno="25"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>Allocator<sp/>=<sp/>StrategizedAllocator&lt;T,<sp/>MemalignStrategy&lt;4096&gt;&gt;<sp/>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Allocator<sp/>=<sp/>StrategizedAllocator&lt;T,<sp/>MallocStrategy&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="28" refid="class_bit_compressed_vector" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_bit_compressed_vector" kindref="compound">BitCompressedVector</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_base_allocated_attribute_vector" kindref="compound">BaseAllocatedAttributeVector</ref>&lt;BitCompressedVector&lt;T,<sp/>Allocator&gt;,<sp/>Allocator&gt;<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Typedef<sp/>for<sp/>the<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="class_bit_compressed_vector_1a046582544a93f2edafea02ec75802ea6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="class_bit_compressed_vector_1a046582544a93f2edafea02ec75802ea6" kindref="member">storage_t</ref>;</highlight></codeline>
<codeline lineno="32" refid="class_bit_compressed_vector_1ae1985e13f7fc078c93a05145514ccc22" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;uint64_t&gt;<sp/><ref refid="class_bit_compressed_vector_1ae1985e13f7fc078c93a05145514ccc22" kindref="member">bit_size_list_t</ref>;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>bits<sp/>per<sp/>storage<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="class_bit_compressed_vector_1a5babf851f2145183d7e74a5e3f7e2fcd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="class_bit_compressed_vector_1a5babf851f2145183d7e74a5e3f7e2fcd" kindref="member">_bit_width</ref><sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_bit_compressed_vector_1a046582544a93f2edafea02ec75802ea6" kindref="member">storage_t</ref>)<sp/><sp/>*<sp/>8;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Pointer<sp/>to<sp/>the<sp/>data,<sp/>aligned<sp/>to<sp/>16<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><ref refid="class_bit_compressed_vector_1a046582544a93f2edafea02ec75802ea6" kindref="member">storage_t</ref><sp/>*_data<sp/><ref refid="class_bit_compressed_vector_1a3b8821e9d07487f756aad421f3ff0b88" kindref="member">__attribute__</ref>((aligned(16)));</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>tuples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="class_bit_compressed_vector_1abd1aeede363c0bf80850c74c91eedcb4" refkind="member"><highlight class="normal"><sp/><sp/>uint64_t<sp/><ref refid="class_bit_compressed_vector_1abd1aeede363c0bf80850c74c91eedcb4" kindref="member">_size</ref>;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Variables<sp/>for<sp/>Data<sp/>handling<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>allocated<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="class_bit_compressed_vector_1ad2a0aaa6255d6c30738e5b2329a5e5ed" refkind="member"><highlight class="normal"><sp/><sp/>uint64_t<sp/><ref refid="class_bit_compressed_vector_1ad2a0aaa6255d6c30738e5b2329a5e5ed" kindref="member">_allocatedBlocks</ref>;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>columns<sp/>in<sp/>this<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="class_bit_compressed_vector_1a0d3063334d89aa36811c4d01b85990e6" refkind="member"><highlight class="normal"><sp/><sp/>uint64_t<sp/><ref refid="class_bit_compressed_vector_1a0d3063334d89aa36811c4d01b85990e6" kindref="member">_columns</ref>;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>bits<sp/>used<sp/>for<sp/>each<sp/>column</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="class_bit_compressed_vector_1aca480c808d231a7cab59f3e5808b6930" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_bit_compressed_vector_1ae1985e13f7fc078c93a05145514ccc22" kindref="member">bit_size_list_t</ref><sp/><ref refid="class_bit_compressed_vector_1aca480c808d231a7cab59f3e5808b6930" kindref="member">_bits</ref>;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="class_bit_compressed_vector_1ad3100898d050843be4dba6f7534ace64" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/><ref refid="class_bit_compressed_vector_1ad3100898d050843be4dba6f7534ace64" kindref="member">value_type</ref>;</highlight></codeline>
<codeline lineno="57" refid="class_bit_compressed_vector_1a653330885efc03e8e3b3042776bd50a7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_bit_compressed_vector" kindref="compound">BitCompressedVector&lt;T, Allocator&gt;</ref><sp/><ref refid="class_bit_compressed_vector_1a653330885efc03e8e3b3042776bd50a7" kindref="member">vector_type</ref>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="class_bit_compressed_vector_1a70489c294798b94761b44c0e9938d66a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_bit_compressed_vector_1a70489c294798b94761b44c0e9938d66a" kindref="member">BitCompressedVector</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>columns,</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rows,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;uint64_t&gt;<sp/>bits):<sp/>_data(<ref refid="csb__tree_8cpp_1ab979d9d4b4923f7c54d6caa6e1a61936" kindref="member">nullptr</ref>),<sp/><ref refid="class_bit_compressed_vector_1abd1aeede363c0bf80850c74c91eedcb4" kindref="member">_size</ref>(0),<sp/><ref refid="class_bit_compressed_vector_1ad2a0aaa6255d6c30738e5b2329a5e5ed" kindref="member">_allocatedBlocks</ref>(0),<sp/><ref refid="class_bit_compressed_vector_1a0d3063334d89aa36811c4d01b85990e6" kindref="member">_columns</ref>(columns),<sp/><ref refid="class_bit_compressed_vector_1aca480c808d231a7cab59f3e5808b6930" kindref="member">_bits</ref>(bits)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_bit_compressed_vector_1a12db405ab418f2f5a16e7d9eb0021453" kindref="member">reserve</ref>(rows);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="class_bit_compressed_vector_1a1992e9f0f6149380f4ed6d8ee7719a63" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="class_bit_compressed_vector_1a1992e9f0f6149380f4ed6d8ee7719a63" kindref="member">~BitCompressedVector</ref>()<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>Allocator::Strategy::deallocate(_data,<sp/><ref refid="class_bit_compressed_vector_1ad2a0aaa6255d6c30738e5b2329a5e5ed" kindref="member">_allocatedBlocks</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_bit_compressed_vector_1a046582544a93f2edafea02ec75802ea6" kindref="member">storage_t</ref>));</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="class_bit_compressed_vector_1a94906155ced7106a651f7749be5ab40d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="class_bit_compressed_vector_1a94906155ced7106a651f7749be5ab40d" kindref="member">data</ref>()<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Direct<sp/>data<sp/>access<sp/>not<sp/>allowed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="72" refid="class_bit_compressed_vector_1a405f98126d3ec1b81f2ddf6829547764" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_bit_compressed_vector_1a405f98126d3ec1b81f2ddf6829547764" kindref="member">setNumRows</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Direct<sp/>data<sp/>access<sp/>not<sp/>allowed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="class_bit_compressed_vector_1a36d28dac4401f8e3a3b1ccf87346137b" refkind="member"><highlight class="normal"><sp/><sp/>T<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>column,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>row)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_bit_compressed_vector_1a959f049c4989a1c39693a2df09ebaed7" kindref="member">checkAccess</ref>(column,<sp/>row);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>result;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/><ref refid="class_bit_compressed_vector_1a622c19c3a62f007b2c711ab0509bd313" kindref="member">_blockOffset</ref>(row);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>colOffset<sp/>=<sp/><ref refid="class_bit_compressed_vector_1afe223fb648d77d67433e92835aaf1d44" kindref="member">_offsetForColumn</ref>(column);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>block<sp/>=<sp/><ref refid="class_bit_compressed_vector_1af9311ee3a6e17e1db7e7a7893a8589b1" kindref="member">_blockPosition</ref>(row)<sp/>+<sp/>(offset<sp/>+<sp/>colOffset)<sp/>/<sp/><ref refid="class_bit_compressed_vector_1a5babf851f2145183d7e74a5e3f7e2fcd" kindref="member">_bit_width</ref>;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Adjust<sp/>the<sp/>column<sp/>offset<sp/>to<sp/>the<sp/>new<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>colOffset<sp/>=<sp/>(offset<sp/>+<sp/>colOffset)<sp/>%<sp/><ref refid="class_bit_compressed_vector_1a5babf851f2145183d7e74a5e3f7e2fcd" kindref="member">_bit_width</ref>;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>bounds<sp/>=<sp/><ref refid="class_bit_compressed_vector_1a5babf851f2145183d7e74a5e3f7e2fcd" kindref="member">_bit_width</ref><sp/>-<sp/>colOffset;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>uint64_t<sp/>baseMask<sp/>=<sp/>(1ull<sp/>&lt;&lt;<sp/><ref refid="class_bit_compressed_vector_1aca480c808d231a7cab59f3e5808b6930" kindref="member">_bits</ref>[column])<sp/>-<sp/>1ull;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>(_data[block]<sp/>&gt;&gt;<sp/>colOffset)<sp/>&amp;<sp/>baseMask;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bounds<sp/>&lt;<sp/><ref refid="class_bit_compressed_vector_1aca480c808d231a7cab59f3e5808b6930" kindref="member">_bits</ref>[column])<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colOffset<sp/>=<sp/><ref refid="class_bit_compressed_vector_1aca480c808d231a7cab59f3e5808b6930" kindref="member">_bits</ref>[column]<sp/>-<sp/>bounds;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>baseMask<sp/>=<sp/>(1ull<sp/>&lt;&lt;<sp/>colOffset)<sp/>-<sp/>1ull;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>(baseMask<sp/>&amp;<sp/>_data[block<sp/>+<sp/>1])<sp/>&lt;&lt;<sp/>bounds;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100" refid="class_bit_compressed_vector_1a7951d9dcabc6a35208b00c1cfef8ed5c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">set</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>column,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>row,<sp/>T<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_bit_compressed_vector_1a959f049c4989a1c39693a2df09ebaed7" kindref="member">checkAccess</ref>(column,<sp/>row);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/><ref refid="class_bit_compressed_vector_1a622c19c3a62f007b2c711ab0509bd313" kindref="member">_blockOffset</ref>(row);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>colOffset<sp/>=<sp/><ref refid="class_bit_compressed_vector_1afe223fb648d77d67433e92835aaf1d44" kindref="member">_offsetForColumn</ref>(column);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>block<sp/>=<sp/><ref refid="class_bit_compressed_vector_1af9311ee3a6e17e1db7e7a7893a8589b1" kindref="member">_blockPosition</ref>(row)<sp/>+<sp/>(offset<sp/>+<sp/>colOffset)<sp/>/<sp/><ref refid="class_bit_compressed_vector_1a5babf851f2145183d7e74a5e3f7e2fcd" kindref="member">_bit_width</ref>;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Adjust<sp/>the<sp/>column<sp/>offset<sp/>to<sp/>the<sp/>new<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>colOffset<sp/>=<sp/>(offset<sp/>+<sp/>colOffset)<sp/>%<sp/><ref refid="class_bit_compressed_vector_1a5babf851f2145183d7e74a5e3f7e2fcd" kindref="member">_bit_width</ref>;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>uint64_t<sp/>bounds<sp/>=<sp/><ref refid="class_bit_compressed_vector_1a5babf851f2145183d7e74a5e3f7e2fcd" kindref="member">_bit_width</ref><sp/>-<sp/>colOffset;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>uint64_t<sp/>baseMask<sp/>=<sp/>(1ull<sp/>&lt;&lt;<sp/><ref refid="class_bit_compressed_vector_1aca480c808d231a7cab59f3e5808b6930" kindref="member">_bits</ref>[column])<sp/>-<sp/>1ull;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>uint64_t<sp/>mask<sp/>=<sp/>~(baseMask<sp/>&lt;&lt;<sp/>colOffset);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>_data[block]<sp/>&amp;=<sp/>mask;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>_data[block]<sp/>|=<sp/>((uint64_t)<sp/>value<sp/>&amp;<sp/>baseMask)<sp/>&lt;&lt;<sp/>colOffset;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bounds<sp/>&lt;<sp/><ref refid="class_bit_compressed_vector_1aca480c808d231a7cab59f3e5808b6930" kindref="member">_bits</ref>[column])<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mask<sp/>=<sp/>~(baseMask<sp/>&gt;&gt;<sp/>bounds);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_data[block<sp/>+<sp/>1]<sp/>&amp;=<sp/>mask;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_data[block<sp/>+<sp/>1]<sp/>|=<sp/>((uint64_t)<sp/>value<sp/>&amp;<sp/>baseMask)<sp/>&gt;&gt;<sp/>bounds;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/><sp/><sp/><sp/>Reserve<sp/>memory<sp/>for<sp/>the<sp/>given<sp/>number<sp/>of<sp/>rows.<sp/>memory<sp/>will<sp/>only<sp/>be</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/><sp/><sp/><sp/>allocated<sp/>if<sp/>the<sp/>number<sp/>of<sp/>rows<sp/>requires<sp/>a<sp/>larger<sp/>number<sp/>of<sp/>blocks</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/><sp/><sp/><sp/>than<sp/>before<sp/>and<sp/>it<sp/>can<sp/>only<sp/>be<sp/>incremented.</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129" refid="class_bit_compressed_vector_1a12db405ab418f2f5a16e7d9eb0021453" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_bit_compressed_vector_1a12db405ab418f2f5a16e7d9eb0021453" kindref="member">reserve</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rows)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rows<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/><ref refid="class_bit_compressed_vector_1a4d0381b5b9b908037ee57c7201ecd8e0" kindref="member">_blocks</ref>(rows)<sp/>&gt;<sp/><ref refid="class_bit_compressed_vector_1a4d0381b5b9b908037ee57c7201ecd8e0" kindref="member">_blocks</ref>(<ref refid="class_bit_compressed_vector_1ad2a0aaa6255d6c30738e5b2329a5e5ed" kindref="member">_allocatedBlocks</ref>))<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>the<sp/>new<sp/>memory,<sp/>copy<sp/>the<sp/>old<sp/>memory<sp/>and<sp/>swap<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="class_bit_compressed_vector_1a4d0381b5b9b908037ee57c7201ecd8e0" kindref="member">_blocks</ref>(rows)<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_bit_compressed_vector_1a046582544a93f2edafea02ec75802ea6" kindref="member">storage_t</ref><sp/>*newMemory<sp/>=<sp/><ref refid="class_bit_compressed_vector_1ad1d14605a49903b2e5d6c6b4125bd8d1" kindref="member">_allocate</ref>(<ref refid="class_bit_compressed_vector_1a4d0381b5b9b908037ee57c7201ecd8e0" kindref="member">_blocks</ref>(rows));</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_bit_compressed_vector_1ad2a0aaa6255d6c30738e5b2329a5e5ed" kindref="member">_allocatedBlocks</ref><sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::memcpy(newMemory,<sp/>_data,<sp/><ref refid="class_bit_compressed_vector_1ad2a0aaa6255d6c30738e5b2329a5e5ed" kindref="member">_allocatedBlocks</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_bit_compressed_vector_1a046582544a93f2edafea02ec75802ea6" kindref="member">storage_t</ref>));</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::swap(_data,<sp/>newMemory);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>deallocate<sp/>if<sp/>there<sp/>was<sp/>something<sp/>allocated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newMemory<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Allocator::Strategy::deallocate(newMemory,<sp/><ref refid="class_bit_compressed_vector_1ad2a0aaa6255d6c30738e5b2329a5e5ed" kindref="member">_allocatedBlocks</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_bit_compressed_vector_1a046582544a93f2edafea02ec75802ea6" kindref="member">storage_t</ref>));</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>new<sp/>allocarted<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_bit_compressed_vector_1ad2a0aaa6255d6c30738e5b2329a5e5ed" kindref="member">_allocatedBlocks</ref><sp/>=<sp/><ref refid="class_bit_compressed_vector_1a4d0381b5b9b908037ee57c7201ecd8e0" kindref="member">_blocks</ref>(rows);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/><sp/><sp/><sp/>Immediately<sp/>resizes<sp/>the<sp/>data<sp/>vector<sp/>to<sp/>0<sp/>and<sp/>frees<sp/>the<sp/>memory</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/><sp/><sp/>allocated<sp/>by<sp/>the<sp/>vector</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153" refid="class_bit_compressed_vector_1a17c265d81dd5af5b5cab47aa8f1c654f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_bit_compressed_vector_1a17c265d81dd5af5b5cab47aa8f1c654f" kindref="member">clear</ref>()<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_bit_compressed_vector_1abd1aeede363c0bf80850c74c91eedcb4" kindref="member">_size</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>Allocator::Strategy::deallocate(_data,<sp/><ref refid="class_bit_compressed_vector_1ad2a0aaa6255d6c30738e5b2329a5e5ed" kindref="member">_allocatedBlocks</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_bit_compressed_vector_1a046582544a93f2edafea02ec75802ea6" kindref="member">storage_t</ref>));</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>_data<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159" refid="class_bit_compressed_vector_1a0f51137244c84835c5b3e45b8b27b5de" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_bit_compressed_vector_1a0f51137244c84835c5b3e45b8b27b5de" kindref="member">size</ref>()<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_bit_compressed_vector_1abd1aeede363c0bf80850c74c91eedcb4" kindref="member">_size</ref>;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/><sp/><sp/><sp/>Allocate<sp/>memory<sp/>for<sp/>size<sp/>rows<sp/>and<sp/>increase<sp/>the<sp/>size<sp/>of<sp/>the<sp/>data</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/><sp/><sp/><sp/>container<sp/>to<sp/>size</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167" refid="class_bit_compressed_vector_1a03cf285f793cda8b25908455d2a781dc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_bit_compressed_vector_1a03cf285f793cda8b25908455d2a781dc" kindref="member">resize</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_bit_compressed_vector_1a0f51137244c84835c5b3e45b8b27b5de" kindref="member">size</ref>)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_bit_compressed_vector_1a12db405ab418f2f5a16e7d9eb0021453" kindref="member">reserve</ref>(size);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_bit_compressed_vector_1abd1aeede363c0bf80850c74c91eedcb4" kindref="member">_size</ref><sp/>=<sp/><ref refid="class_bit_compressed_vector_1a0f51137244c84835c5b3e45b8b27b5de" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173" refid="class_bit_compressed_vector_1aff6233b0d55ec50a25d3b2192169ba89" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="class_bit_compressed_vector_1aff6233b0d55ec50a25d3b2192169ba89" kindref="member">capacity</ref>()<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="class_bit_compressed_vector_1ad2a0aaa6255d6c30738e5b2329a5e5ed" kindref="member">_allocatedBlocks</ref><sp/>*<sp/><ref refid="class_bit_compressed_vector_1a5babf851f2145183d7e74a5e3f7e2fcd" kindref="member">_bit_width</ref>)<sp/>/<sp/><ref refid="class_bit_compressed_vector_1a54e6af7af790f4a7e41eb74b2bf6aecc" kindref="member">_tupleWidth</ref>();</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177" refid="class_bit_compressed_vector_1a60f2a7afba641a34381c71fcc9bbad1d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_bit_compressed_vector_1a60f2a7afba641a34381c71fcc9bbad1d" kindref="member">rewriteColumn</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>column,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bits)<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//uint64_t<sp/>oldBits<sp/>=<sp/>_bits[column];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_bit_compressed_vector_1aca480c808d231a7cab59f3e5808b6930" kindref="member">_bits</ref>[column]<sp/>=<sp/>bits;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_bit_compressed_vector_1abd1aeede363c0bf80850c74c91eedcb4" kindref="member">_size</ref><sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Bad<sp/>rewrite&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;BaseAttributeVector&lt;T&gt;&gt;<sp/><ref refid="class_bit_compressed_vector_1a949adbaee3213b75409530bea76e5ffc" kindref="member">copy</ref>();</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="188" refid="class_bit_compressed_vector_1a959f049c4989a1c39693a2df09ebaed7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_bit_compressed_vector_1a959f049c4989a1c39693a2df09ebaed7" kindref="member">checkAccess</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">&amp;<sp/>column,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">&amp;<sp/>rows)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>EXPENSIVE_ASSERTIONS</highlight></codeline>
<codeline lineno="190"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(column<sp/>&gt;=<sp/><ref refid="class_bit_compressed_vector_1a0d3063334d89aa36811c4d01b85990e6" kindref="member">_columns</ref>)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(</highlight><highlight class="stringliteral">&quot;Trying<sp/>to<sp/>access<sp/>column<sp/>&apos;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/><ref refid="namespacehyrise_1aec58f00f171c12aa4ef29682158b9fc2" kindref="member">std::to_string</ref>(column)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>where<sp/>only<sp/>&apos;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/><ref refid="namespacehyrise_1aec58f00f171c12aa4ef29682158b9fc2" kindref="member">std::to_string</ref>(<ref refid="class_bit_compressed_vector_1a0d3063334d89aa36811c4d01b85990e6" kindref="member">_columns</ref>)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>available&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rows<sp/>&gt;=<sp/><ref refid="class_bit_compressed_vector_1abd1aeede363c0bf80850c74c91eedcb4" kindref="member">_size</ref>)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(</highlight><highlight class="stringliteral">&quot;Trying<sp/>to<sp/>access<sp/>rows<sp/>&apos;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/><ref refid="namespacehyrise_1aec58f00f171c12aa4ef29682158b9fc2" kindref="member">std::to_string</ref>(rows)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>where<sp/>only<sp/>&apos;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/><ref refid="namespacehyrise_1aec58f00f171c12aa4ef29682158b9fc2" kindref="member">std::to_string</ref>(<ref refid="class_bit_compressed_vector_1abd1aeede363c0bf80850c74c91eedcb4" kindref="member">_size</ref>)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>available&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="201"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/><sp/><sp/><sp/>Calculates<sp/>the<sp/>offset<sp/>for<sp/>a<sp/>given<sp/>column<sp/>from<sp/>the<sp/>begining<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/><sp/><sp/><sp/>row<sp/>in<sp/>bits</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207" refid="class_bit_compressed_vector_1afe223fb648d77d67433e92835aaf1d44" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="class_bit_compressed_vector_1afe223fb648d77d67433e92835aaf1d44" kindref="member">_offsetForColumn</ref>(uint64_t<sp/>column)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>column;<sp/>++i)</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>+=<sp/><ref refid="class_bit_compressed_vector_1aca480c808d231a7cab59f3e5808b6930" kindref="member">_bits</ref>[i];</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>offset;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/><sp/><sp/><sp/>Calculates<sp/>the<sp/>starting<sp/>block<sp/>for<sp/>the<sp/>row</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217" refid="class_bit_compressed_vector_1af9311ee3a6e17e1db7e7a7893a8589b1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="class_bit_compressed_vector_1af9311ee3a6e17e1db7e7a7893a8589b1" kindref="member">_blockPosition</ref>(uint64_t<sp/>row)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="class_bit_compressed_vector_1a54e6af7af790f4a7e41eb74b2bf6aecc" kindref="member">_tupleWidth</ref>()<sp/>*<sp/>row)<sp/>/<sp/><ref refid="class_bit_compressed_vector_1a5babf851f2145183d7e74a5e3f7e2fcd" kindref="member">_bit_width</ref>;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/><sp/><sp/><sp/>Calculates<sp/>the<sp/>offset<sp/>of<sp/>the<sp/>row<sp/>inside<sp/>the<sp/>block</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224" refid="class_bit_compressed_vector_1a622c19c3a62f007b2c711ab0509bd313" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="class_bit_compressed_vector_1a622c19c3a62f007b2c711ab0509bd313" kindref="member">_blockOffset</ref>(uint64_t<sp/>row)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="class_bit_compressed_vector_1a54e6af7af790f4a7e41eb74b2bf6aecc" kindref="member">_tupleWidth</ref>()<sp/>*<sp/>row)<sp/>%<sp/><ref refid="class_bit_compressed_vector_1a5babf851f2145183d7e74a5e3f7e2fcd" kindref="member">_bit_width</ref>;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>number<sp/>of<sp/>required<sp/>blocks<sp/>for<sp/>the<sp/>number<sp/>of<sp/>rows<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230" refid="class_bit_compressed_vector_1a4d0381b5b9b908037ee57c7201ecd8e0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="class_bit_compressed_vector_1a4d0381b5b9b908037ee57c7201ecd8e0" kindref="member">_blocks</ref>(uint64_t<sp/>rows)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((rows<sp/>*<sp/><ref refid="class_bit_compressed_vector_1a54e6af7af790f4a7e41eb74b2bf6aecc" kindref="member">_tupleWidth</ref>())<sp/>+<sp/><ref refid="class_bit_compressed_vector_1a5babf851f2145183d7e74a5e3f7e2fcd" kindref="member">_bit_width</ref><sp/>-<sp/>1)<sp/>/<sp/><ref refid="class_bit_compressed_vector_1a5babf851f2145183d7e74a5e3f7e2fcd" kindref="member">_bit_width</ref>;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/><sp/><sp/><sp/>Calculate<sp/>the<sp/>number<sp/>of<sp/>required<sp/>bits<sp/>for<sp/>the<sp/>tuple</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237" refid="class_bit_compressed_vector_1a54e6af7af790f4a7e41eb74b2bf6aecc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="class_bit_compressed_vector_1a54e6af7af790f4a7e41eb74b2bf6aecc" kindref="member">_tupleWidth</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="layout__utils_8h_1ade2593c9a1f0314beb0796a5b32a8d70" kindref="member">sum</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sum<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_bit_compressed_vector_1aca480c808d231a7cab59f3e5808b6930" kindref="member">_bits</ref>.size();<sp/>++i)</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/><ref refid="class_bit_compressed_vector_1aca480c808d231a7cab59f3e5808b6930" kindref="member">_bits</ref>[i];</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="layout__utils_8h_1ade2593c9a1f0314beb0796a5b32a8d70" kindref="member">sum</ref>;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/><sp/>*<sp/>Allocate<sp/>memory<sp/>given<sp/>by<sp/>the<sp/>number<sp/>of<sp/>blocks</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249" refid="class_bit_compressed_vector_1ad1d14605a49903b2e5d6c6b4125bd8d1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="class_bit_compressed_vector_1a046582544a93f2edafea02ec75802ea6" kindref="member">storage_t</ref><sp/>*<ref refid="class_bit_compressed_vector_1ad1d14605a49903b2e5d6c6b4125bd8d1" kindref="member">_allocate</ref>(uint64_t<sp/>numBlocks)<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_bit_compressed_vector_1a94906155ced7106a651f7749be5ab40d" kindref="member">data</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_bit_compressed_vector_1a046582544a93f2edafea02ec75802ea6" kindref="member">storage_t</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(Allocator::Strategy::allocate(numBlocks<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_bit_compressed_vector_1a046582544a93f2edafea02ec75802ea6" kindref="member">storage_t</ref>)));</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_bit_compressed_vector_1a94906155ced7106a651f7749be5ab40d" kindref="member">data</ref><sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Allocator::Strategy::deallocate(<ref refid="class_bit_compressed_vector_1a94906155ced7106a651f7749be5ab40d" kindref="member">data</ref>,<sp/>numBlocks<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_bit_compressed_vector_1a046582544a93f2edafea02ec75802ea6" kindref="member">storage_t</ref>));</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::bad_alloc();</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>std::memset(<ref refid="class_bit_compressed_vector_1a94906155ced7106a651f7749be5ab40d" kindref="member">data</ref>,<sp/>0,<sp/>numBlocks<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_bit_compressed_vector_1a046582544a93f2edafea02ec75802ea6" kindref="member">storage_t</ref>));</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_bit_compressed_vector_1a94906155ced7106a651f7749be5ab40d" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal">};</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Allocator&gt;</highlight></codeline>
<codeline lineno="265" refid="class_bit_compressed_vector_1a949adbaee3213b75409530bea76e5ffc" refkind="member"><highlight class="normal">std::shared_ptr&lt;BaseAttributeVector&lt;T&gt;&gt;<sp/><sp/><ref refid="class_bit_compressed_vector_1a949adbaee3213b75409530bea76e5ffc" kindref="member">BitCompressedVector&lt;T, Allocator&gt;::copy</ref>()<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;BitCompressedVector&gt;<sp/>b<sp/>=<sp/>std::make_shared&lt;BitCompressedVector&gt;(_columns,<sp/>_size,<sp/>_bits);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>b-&gt;resize(_size);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>std::memcpy(b-&gt;_data,<sp/>_data,<sp/>_allocatedBlocks<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_bit_compressed_vector_1a046582544a93f2edafea02ec75802ea6" kindref="member">storage_t</ref>));</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b;</highlight></codeline>
<codeline lineno="270"><highlight class="normal">}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>SRC_LIB_STORAGE_BITCOMPRESSEDVECTOR_H_</highlight></codeline>
    </programlisting>
    <location file="/home/grund/hyrise/src/lib/storage/BitCompressedVector.h"/>
  </compounddef>
</doxygen>
