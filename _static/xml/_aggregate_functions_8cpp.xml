<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.2">
  <compounddef id="_aggregate_functions_8cpp" kind="file">
    <compoundname>AggregateFunctions.cpp</compoundname>
    <includes refid="_aggregate_functions_8h" local="yes">AggregateFunctions.h</includes>
    <includes local="yes">json.h</includes>
    <incdepgraph>
      <node id="2736">
        <label>list</label>
      </node>
      <node id="2765">
        <label>boost/mpl/size.hpp</label>
      </node>
      <node id="2757">
        <label>atomic</label>
      </node>
      <node id="2724">
        <label>boost/mpl/vector.hpp</label>
      </node>
      <node id="2767">
        <label>functional</label>
      </node>
      <node id="2713">
        <label>limits</label>
      </node>
      <node id="2755">
        <label>boost/functional/hash.hpp</label>
      </node>
      <node id="2730">
        <label>assert.h</label>
      </node>
      <node id="2726">
        <label>boost/lexical_cast.hpp</label>
      </node>
      <node id="2746">
        <label>boost/iterator/iterator_facade.hpp</label>
      </node>
      <node id="2719">
        <label>cstdint</label>
      </node>
      <node id="2766">
        <label>storage/hash_functor.h</label>
        <link refid="hash__functor_8h"/>
        <childnode refid="2767" relation="include">
        </childnode>
        <childnode refid="2721" relation="include">
        </childnode>
        <childnode refid="2712" relation="include">
        </childnode>
      </node>
      <node id="2760">
        <label>helper/checked_cast.h</label>
        <link refid="checked__cast_8h"/>
        <childnode refid="2714" relation="include">
        </childnode>
      </node>
      <node id="2743">
        <label>storage/BaseDictionary.h</label>
        <link refid="_base_dictionary_8h"/>
        <childnode refid="2721" relation="include">
        </childnode>
        <childnode refid="2732" relation="include">
        </childnode>
        <childnode refid="2744" relation="include">
        </childnode>
      </node>
      <node id="2722">
        <label>stdint.h</label>
      </node>
      <node id="2742">
        <label>stdlib.h</label>
      </node>
      <node id="2756">
        <label>storage/HashTable.h</label>
        <link refid="_hash_table_8h"/>
        <childnode refid="2757" relation="include">
        </childnode>
        <childnode refid="2758" relation="include">
        </childnode>
        <childnode refid="2759" relation="include">
        </childnode>
        <childnode refid="2714" relation="include">
        </childnode>
        <childnode refid="2718" relation="include">
        </childnode>
        <childnode refid="2760" relation="include">
        </childnode>
        <childnode refid="2761" relation="include">
        </childnode>
        <childnode refid="2712" relation="include">
        </childnode>
        <childnode refid="2762" relation="include">
        </childnode>
        <childnode refid="2766" relation="include">
        </childnode>
        <childnode refid="2721" relation="include">
        </childnode>
      </node>
      <node id="2740">
        <label>errno.h</label>
      </node>
      <node id="2715">
        <label>stdexcept</label>
      </node>
      <node id="2717">
        <label>string</label>
      </node>
      <node id="2763">
        <label>boost/mpl/at.hpp</label>
      </node>
      <node id="2752">
        <label>map</label>
      </node>
      <node id="2728">
        <label>storage/ValueIdMap.hpp</label>
        <link refid="_value_id_map_8hpp"/>
        <childnode refid="2729" relation="include">
        </childnode>
        <childnode refid="2748" relation="include">
        </childnode>
      </node>
      <node id="2739">
        <label>memory/MemalignStrategy.h</label>
        <link refid="_memalign_strategy_8h"/>
        <childnode refid="2740" relation="include">
        </childnode>
        <childnode refid="2741" relation="include">
        </childnode>
        <childnode refid="2742" relation="include">
        </childnode>
      </node>
      <node id="2751">
        <label>exception</label>
      </node>
      <node id="2734">
        <label>stddef.h</label>
      </node>
      <node id="2710">
        <label>src/lib/access/AggregateFunctions.cpp</label>
        <link refid="AggregateFunctions.cpp"/>
        <childnode refid="2711" relation="include">
        </childnode>
        <childnode refid="2768" relation="include">
        </childnode>
      </node>
      <node id="2748">
        <label>storage/OrderIndifferentDictionary.h</label>
        <link refid="_order_indifferent_dictionary_8h"/>
        <childnode refid="2721" relation="include">
        </childnode>
        <childnode refid="2732" relation="include">
        </childnode>
        <childnode refid="2743" relation="include">
        </childnode>
        <childnode refid="2744" relation="include">
        </childnode>
        <childnode refid="2749" relation="include">
        </childnode>
        <childnode refid="2747" relation="include">
        </childnode>
        <childnode refid="2751" relation="include">
        </childnode>
        <childnode refid="2716" relation="include">
        </childnode>
        <childnode refid="2752" relation="include">
        </childnode>
        <childnode refid="2714" relation="include">
        </childnode>
        <childnode refid="2753" relation="include">
        </childnode>
        <childnode refid="2754" relation="include">
        </childnode>
        <childnode refid="2755" relation="include">
        </childnode>
      </node>
      <node id="2723">
        <label>ostream</label>
      </node>
      <node id="2768">
        <label>json.h</label>
      </node>
      <node id="2753">
        <label>limits.h</label>
      </node>
      <node id="2744">
        <label>storage/DictionaryIterator.h</label>
        <link refid="_dictionary_iterator_8h"/>
        <childnode refid="2745" relation="include">
        </childnode>
        <childnode refid="2746" relation="include">
        </childnode>
      </node>
      <node id="2732">
        <label>storage/AbstractDictionary.h</label>
        <link refid="_abstract_dictionary_8h"/>
        <childnode refid="2716" relation="include">
        </childnode>
        <childnode refid="2717" relation="include">
        </childnode>
        <childnode refid="2714" relation="include">
        </childnode>
        <childnode refid="2733" relation="include">
        </childnode>
        <childnode refid="2737" relation="include">
        </childnode>
        <childnode refid="2739" relation="include">
        </childnode>
        <childnode refid="2721" relation="include">
        </childnode>
      </node>
      <node id="2750">
        <label>string.h</label>
      </node>
      <node id="2712">
        <label>storage/AbstractTable.h</label>
        <link refid="_abstract_table_8h"/>
        <childnode refid="2713" relation="include">
        </childnode>
        <childnode refid="2714" relation="include">
        </childnode>
        <childnode refid="2715" relation="include">
        </childnode>
        <childnode refid="2716" relation="include">
        </childnode>
        <childnode refid="2717" relation="include">
        </childnode>
        <childnode refid="2718" relation="include">
        </childnode>
        <childnode refid="2720" relation="include">
        </childnode>
        <childnode refid="2721" relation="include">
        </childnode>
        <childnode refid="2727" relation="include">
        </childnode>
        <childnode refid="2728" relation="include">
        </childnode>
      </node>
      <node id="2720">
        <label>storage/AbstractResource.h</label>
        <link refid="_abstract_resource_8h"/>
      </node>
      <node id="2754">
        <label>boost/unordered_map.hpp</label>
      </node>
      <node id="2761">
        <label>storage/AbstractHashTable.h</label>
        <link refid="_abstract_hash_table_8h"/>
        <childnode refid="2719" relation="include">
        </childnode>
        <childnode refid="2714" relation="include">
        </childnode>
        <childnode refid="2718" relation="include">
        </childnode>
        <childnode refid="2720" relation="include">
        </childnode>
        <childnode refid="2721" relation="include">
        </childnode>
      </node>
      <node id="2716">
        <label>vector</label>
      </node>
      <node id="2764">
        <label>boost/mpl/int.hpp</label>
      </node>
      <node id="2718">
        <label>helper/types.h</label>
        <link refid="types_8h"/>
        <childnode refid="2719" relation="include">
        </childnode>
        <childnode refid="2717" relation="include">
        </childnode>
        <childnode refid="2713" relation="include">
        </childnode>
        <childnode refid="2714" relation="include">
        </childnode>
        <childnode refid="2716" relation="include">
        </childnode>
      </node>
      <node id="2762">
        <label>storage/meta_storage.h</label>
        <link refid="meta__storage_8h"/>
        <childnode refid="2715" relation="include">
        </childnode>
        <childnode refid="2763" relation="include">
        </childnode>
        <childnode refid="2764" relation="include">
        </childnode>
        <childnode refid="2765" relation="include">
        </childnode>
        <childnode refid="2721" relation="include">
        </childnode>
      </node>
      <node id="2745">
        <label>storage/BaseIterator.h</label>
        <link refid="_base_iterator_8h"/>
      </node>
      <node id="2733">
        <label>memory/StrategizedAllocator.h</label>
        <link refid="_strategized_allocator_8h"/>
        <childnode refid="2734" relation="include">
        </childnode>
        <childnode refid="2735" relation="include">
        </childnode>
        <childnode refid="2736" relation="include">
        </childnode>
        <childnode refid="2715" relation="include">
        </childnode>
      </node>
      <node id="2731">
        <label>iostream</label>
      </node>
      <node id="2727">
        <label>storage/ColumnMetadata.h</label>
        <link refid="_column_metadata_8h"/>
        <childnode refid="2721" relation="include">
        </childnode>
        <childnode refid="2717" relation="include">
        </childnode>
        <childnode refid="2715" relation="include">
        </childnode>
      </node>
      <node id="2759">
        <label>unordered_map</label>
      </node>
      <node id="2725">
        <label>boost/mpl/map.hpp</label>
      </node>
      <node id="2747">
        <label>storage/AbstractAllocatedDictionary.h</label>
        <link refid="_abstract_allocated_dictionary_8h"/>
      </node>
      <node id="2737">
        <label>memory/MallocStrategy.h</label>
        <link refid="_malloc_strategy_8h"/>
        <childnode refid="2731" relation="include">
        </childnode>
        <childnode refid="2719" relation="include">
        </childnode>
        <childnode refid="2738" relation="include">
        </childnode>
      </node>
      <node id="2758">
        <label>set</label>
      </node>
      <node id="2729">
        <label>storage/OrderPreservingDictionary.h</label>
        <link refid="_order_preserving_dictionary_8h"/>
        <childnode refid="2730" relation="include">
        </childnode>
        <childnode refid="2731" relation="include">
        </childnode>
        <childnode refid="2714" relation="include">
        </childnode>
        <childnode refid="2721" relation="include">
        </childnode>
        <childnode refid="2732" relation="include">
        </childnode>
        <childnode refid="2743" relation="include">
        </childnode>
        <childnode refid="2744" relation="include">
        </childnode>
        <childnode refid="2747" relation="include">
        </childnode>
        <childnode refid="2745" relation="include">
        </childnode>
      </node>
      <node id="2735">
        <label>algorithm</label>
      </node>
      <node id="2741">
        <label>stdio.h</label>
      </node>
      <node id="2738">
        <label>cstring</label>
      </node>
      <node id="2711">
        <label>AggregateFunctions.h</label>
        <link refid="_aggregate_functions_8h"/>
        <childnode refid="2712" relation="include">
        </childnode>
        <childnode refid="2756" relation="include">
        </childnode>
        <childnode refid="2721" relation="include">
        </childnode>
        <childnode refid="2762" relation="include">
        </childnode>
        <childnode refid="2768" relation="include">
        </childnode>
        <childnode refid="2716" relation="include">
        </childnode>
      </node>
      <node id="2749">
        <label>storage/csb_tree.h</label>
        <link refid="csb__tree_8h"/>
        <childnode refid="2716" relation="include">
        </childnode>
        <childnode refid="2731" relation="include">
        </childnode>
        <childnode refid="2736" relation="include">
        </childnode>
        <childnode refid="2714" relation="include">
        </childnode>
        <childnode refid="2750" relation="include">
        </childnode>
        <childnode refid="2730" relation="include">
        </childnode>
        <childnode refid="2746" relation="include">
        </childnode>
      </node>
      <node id="2714">
        <label>memory</label>
      </node>
      <node id="2721">
        <label>storage/storage_types.h</label>
        <link refid="storage__types_8h"/>
        <childnode refid="2716" relation="include">
        </childnode>
        <childnode refid="2717" relation="include">
        </childnode>
        <childnode refid="2715" relation="include">
        </childnode>
        <childnode refid="2722" relation="include">
        </childnode>
        <childnode refid="2723" relation="include">
        </childnode>
        <childnode refid="2724" relation="include">
        </childnode>
        <childnode refid="2725" relation="include">
        </childnode>
        <childnode refid="2726" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacehyrise">hyrise</innernamespace>
    <innernamespace refid="namespacehyrise_1_1storage">hyrise::storage</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="_aggregate_functions_8cpp_1a1e1d99ef87b707e40ef25e75f72d4993" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_aggregate_functions_8h_1a3b9157a78fd1faef0b152a06f7e11116" kindref="member">aggregateFunctionMap_t</ref></type>
        <definition>aggregateFunctionMap_t getAggregateFunctionMap</definition>
        <argsstring>()</argsstring>
        <name>getAggregateFunctionMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/grund/hyrise/src/lib/access/AggregateFunctions.cpp" line="15" bodyfile="/home/grund/hyrise/src/lib/access/AggregateFunctions.cpp" bodystart="15" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="_aggregate_functions_8cpp_1a4358b781d3aaff7b214b794be22a89d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_aggregate_fun" kindref="compound">AggregateFun</ref> *</type>
        <definition>AggregateFun* parseAggregateFunction</definition>
        <argsstring>(const Json::Value &amp;data)</argsstring>
        <name>parseAggregateFunction</name>
        <param>
          <type>const Json::Value &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/grund/hyrise/src/lib/access/AggregateFunctions.cpp" line="23" bodyfile="/home/grund/hyrise/src/lib/access/AggregateFunctions.cpp" bodystart="23" bodyend="40"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2012<sp/>Hasso-Plattner-Institut<sp/>fuer<sp/>Softwaresystemtechnik<sp/>GmbH.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_aggregate_functions_8h" kindref="compound">AggregateFunctions.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;json.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">hyrise<sp/>{</highlight></codeline>
<codeline lineno="7" refid="namespacehyrise_1_1storage" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">storage<sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="9" refid="structhyrise_1_1storage_1_1average__aggregate__functor_1aa0cde52a8de452cc13b439adb470573d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>average_aggregate_functor::operator()&lt;std::string&gt;()<sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>calculate<sp/>average<sp/>for<sp/>column<sp/>of<sp/>StringType&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13"><highlight class="normal">}</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="_aggregate_functions_8h_1a1e1d99ef87b707e40ef25e75f72d4993" refkind="member"><highlight class="normal"><ref refid="_aggregate_functions_8h_1a3b9157a78fd1faef0b152a06f7e11116" kindref="member">aggregateFunctionMap_t</ref><sp/><ref refid="_aggregate_functions_8cpp_1a1e1d99ef87b707e40ef25e75f72d4993" kindref="member">getAggregateFunctionMap</ref>()<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><ref refid="_aggregate_functions_8h_1a3b9157a78fd1faef0b152a06f7e11116" kindref="member">aggregateFunctionMap_t</ref><sp/>d;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/>d[</highlight><highlight class="stringliteral">&quot;SUM&quot;</highlight><highlight class="normal">]<sp/>=<sp/><ref refid="struct_aggregate_functions_1ab0571a2034b640dbb973a1b0a9d2268fa90a79ac1aec2113a0b6933775cc5f3c5" kindref="member">AggregateFunctions::SUM</ref>;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/>d[</highlight><highlight class="stringliteral">&quot;COUNT&quot;</highlight><highlight class="normal">]<sp/>=<sp/><ref refid="struct_aggregate_functions_1ab0571a2034b640dbb973a1b0a9d2268fa43a56005ab80ea67df6d196e612f5922" kindref="member">AggregateFunctions::COUNT</ref>;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/>d[</highlight><highlight class="stringliteral">&quot;AVG&quot;</highlight><highlight class="normal">]<sp/>=<sp/><ref refid="struct_aggregate_functions_1ab0571a2034b640dbb973a1b0a9d2268fad3b26075afdfd772a775a8d98d6eb7b9" kindref="member">AggregateFunctions::AVG</ref>;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d;</highlight></codeline>
<codeline lineno="21"><highlight class="normal">}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="_aggregate_functions_8h_1a829480f32fb1332b2aa33ee63b0f0687" refkind="member"><highlight class="normal"><ref refid="class_aggregate_fun" kindref="compound">AggregateFun</ref><sp/>*<ref refid="_aggregate_functions_8cpp_1a4358b781d3aaff7b214b794be22a89d2" kindref="member">parseAggregateFunction</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Json::Value<sp/>&amp;data)<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ftype<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data[</highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">].isNumeric())<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>ftype<sp/>=<sp/>data[</highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">].asUInt();</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data[</highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">].isString())<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>ftype<sp/>=<sp/><ref refid="_aggregate_functions_8cpp_1a1e1d99ef87b707e40ef25e75f72d4993" kindref="member">getAggregateFunctionMap</ref>()[data[</highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">].asString()];</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(ftype)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="struct_aggregate_functions_1ab0571a2034b640dbb973a1b0a9d2268fa90a79ac1aec2113a0b6933775cc5f3c5" kindref="member">AggregateFunctions::SUM</ref>:</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_sum_aggregate_fun_1a2150afa875dd722c9d47084dcf55326e" kindref="member">SumAggregateFun::parse</ref>(data);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="struct_aggregate_functions_1ab0571a2034b640dbb973a1b0a9d2268fa43a56005ab80ea67df6d196e612f5922" kindref="member">AggregateFunctions::COUNT</ref>:</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_count_aggregate_fun_1a6a53054a3f14e9206f4f868b970940da" kindref="member">CountAggregateFun::parse</ref>(data);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="struct_aggregate_functions_1ab0571a2034b640dbb973a1b0a9d2268fad3b26075afdfd772a775a8d98d6eb7b9" kindref="member">AggregateFunctions::AVG</ref>:</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_average_aggregate_fun_1a1bde65836879ba7b36c429dbf5c1d7c0" kindref="member">AverageAggregateFun::parse</ref>(data);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Aggregation<sp/>function<sp/>not<sp/>supported<sp/>in<sp/>GroupByScan&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="class_aggregate_fun_1ae2bdfea5701dab37cf3ae3dc3f0a4193" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_aggregate_fun_1ae2bdfea5701dab37cf3ae3dc3f0a4193" kindref="member">AggregateFun::walk</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_abstract_table" kindref="compound">AbstractTable</ref><sp/>&amp;table)<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_aggregate_fun_1a5b5622673221dc9739f5437b0c40240c" kindref="member">_field_name</ref>.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_aggregate_fun_1ae883edb2662c4550ca5f2ba1f3092131" kindref="member">_field</ref><sp/>=<sp/>table.<ref refid="class_abstract_table_1aaea606e4fd8c92a43febced405de1c6c" kindref="member">numberOfColumn</ref>(<ref refid="class_aggregate_fun_1a5b5622673221dc9739f5437b0c40240c" kindref="member">_field_name</ref>);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="class_sum_aggregate_fun_1a2150afa875dd722c9d47084dcf55326e" refkind="member"><highlight class="normal"><ref refid="class_aggregate_fun" kindref="compound">AggregateFun</ref><sp/>*<ref refid="class_sum_aggregate_fun_1a2150afa875dd722c9d47084dcf55326e" kindref="member">SumAggregateFun::parse</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Json::Value<sp/>&amp;f)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f[</highlight><highlight class="stringliteral">&quot;field&quot;</highlight><highlight class="normal">].isNumeric())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_sum_aggregate_fun_1ae0a3181c773e1a5ef49febc4ff2e29be" kindref="member">SumAggregateFun</ref>(f[</highlight><highlight class="stringliteral">&quot;field&quot;</highlight><highlight class="normal">].asUInt());</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f[</highlight><highlight class="stringliteral">&quot;field&quot;</highlight><highlight class="normal">].isString())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_sum_aggregate_fun_1ae0a3181c773e1a5ef49febc4ff2e29be" kindref="member">SumAggregateFun</ref>(f[</highlight><highlight class="stringliteral">&quot;field&quot;</highlight><highlight class="normal">].asString());</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>parse<sp/>json&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal">};</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="class_count_aggregate_fun_1a6a53054a3f14e9206f4f868b970940da" refkind="member"><highlight class="normal"><ref refid="class_aggregate_fun" kindref="compound">AggregateFun</ref><sp/>*<ref refid="class_count_aggregate_fun_1a6a53054a3f14e9206f4f868b970940da" kindref="member">CountAggregateFun::parse</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Json::Value<sp/>&amp;f)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f[</highlight><highlight class="stringliteral">&quot;field&quot;</highlight><highlight class="normal">].isNumeric())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_count_aggregate_fun_1a1bb268d5128a1bd9b9f71edd536a4707" kindref="member">CountAggregateFun</ref>(f[</highlight><highlight class="stringliteral">&quot;field&quot;</highlight><highlight class="normal">].asUInt());</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f[</highlight><highlight class="stringliteral">&quot;field&quot;</highlight><highlight class="normal">].isString())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_count_aggregate_fun_1a1bb268d5128a1bd9b9f71edd536a4707" kindref="member">CountAggregateFun</ref>(f[</highlight><highlight class="stringliteral">&quot;field&quot;</highlight><highlight class="normal">].asString());</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>parse<sp/>json&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="58"><highlight class="normal">};</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="class_average_aggregate_fun_1a1bde65836879ba7b36c429dbf5c1d7c0" refkind="member"><highlight class="normal"><ref refid="class_aggregate_fun" kindref="compound">AggregateFun</ref><sp/>*<ref refid="class_average_aggregate_fun_1a1bde65836879ba7b36c429dbf5c1d7c0" kindref="member">AverageAggregateFun::parse</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Json::Value<sp/>&amp;f)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f[</highlight><highlight class="stringliteral">&quot;field&quot;</highlight><highlight class="normal">].isNumeric())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_average_aggregate_fun_1a60e77ff49e8ca41b3d7e9cc5814d9819" kindref="member">AverageAggregateFun</ref>(f[</highlight><highlight class="stringliteral">&quot;field&quot;</highlight><highlight class="normal">].asUInt());</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f[</highlight><highlight class="stringliteral">&quot;field&quot;</highlight><highlight class="normal">].isString())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_average_aggregate_fun_1a60e77ff49e8ca41b3d7e9cc5814d9819" kindref="member">AverageAggregateFun</ref>(f[</highlight><highlight class="stringliteral">&quot;field&quot;</highlight><highlight class="normal">].asString());</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>parse<sp/>json&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="64"><highlight class="normal">};</highlight></codeline>
    </programlisting>
    <location file="/home/grund/hyrise/src/lib/access/AggregateFunctions.cpp"/>
  </compounddef>
</doxygen>
