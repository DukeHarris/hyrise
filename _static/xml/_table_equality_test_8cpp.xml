<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.2">
  <compounddef id="_table_equality_test_8cpp" kind="file">
    <compoundname>TableEqualityTest.cpp</compoundname>
    <includes refid="_table_equality_test_8h" local="yes">TableEqualityTest.h</includes>
    <includes refid="_abstract_table_8h" local="no">storage/AbstractTable.h</includes>
    <includes refid="_table_diff_8h" local="no">storage/TableDiff.h</includes>
    <includes refid="_pretty_printer_8h" local="no">storage/PrettyPrinter.h</includes>
    <incdepgraph>
      <node id="25923">
        <label>list</label>
      </node>
      <node id="25911">
        <label>boost/mpl/vector.hpp</label>
      </node>
      <node id="25902">
        <label>limits</label>
      </node>
      <node id="25942">
        <label>boost/functional/hash.hpp</label>
      </node>
      <node id="25917">
        <label>assert.h</label>
      </node>
      <node id="25913">
        <label>boost/lexical_cast.hpp</label>
      </node>
      <node id="25933">
        <label>boost/iterator/iterator_facade.hpp</label>
      </node>
      <node id="25900">
        <label>cstdint</label>
      </node>
      <node id="25930">
        <label>storage/BaseDictionary.h</label>
        <link refid="_base_dictionary_8h"/>
        <childnode refid="25908" relation="include">
        </childnode>
        <childnode refid="25919" relation="include">
        </childnode>
        <childnode refid="25931" relation="include">
        </childnode>
      </node>
      <node id="25909">
        <label>stdint.h</label>
      </node>
      <node id="25929">
        <label>stdlib.h</label>
      </node>
      <node id="25896">
        <label>src/lib/testing/TableEqualityTest.cpp</label>
        <link refid="TableEqualityTest.cpp"/>
        <childnode refid="25897" relation="include">
        </childnode>
        <childnode refid="25905" relation="include">
        </childnode>
        <childnode refid="25943" relation="include">
        </childnode>
        <childnode refid="25944" relation="include">
        </childnode>
      </node>
      <node id="25927">
        <label>errno.h</label>
      </node>
      <node id="25906">
        <label>stdexcept</label>
      </node>
      <node id="25901">
        <label>string</label>
      </node>
      <node id="25939">
        <label>map</label>
      </node>
      <node id="25897">
        <label>TableEqualityTest.h</label>
        <link refid="_table_equality_test_8h"/>
        <childnode refid="25898" relation="include">
        </childnode>
        <childnode refid="25899" relation="include">
        </childnode>
      </node>
      <node id="25915">
        <label>storage/ValueIdMap.hpp</label>
        <link refid="_value_id_map_8hpp"/>
        <childnode refid="25916" relation="include">
        </childnode>
        <childnode refid="25935" relation="include">
        </childnode>
      </node>
      <node id="25926">
        <label>memory/MemalignStrategy.h</label>
        <link refid="_memalign_strategy_8h"/>
        <childnode refid="25927" relation="include">
        </childnode>
        <childnode refid="25928" relation="include">
        </childnode>
        <childnode refid="25929" relation="include">
        </childnode>
      </node>
      <node id="25938">
        <label>exception</label>
      </node>
      <node id="25921">
        <label>stddef.h</label>
      </node>
      <node id="25935">
        <label>storage/OrderIndifferentDictionary.h</label>
        <link refid="_order_indifferent_dictionary_8h"/>
        <childnode refid="25908" relation="include">
        </childnode>
        <childnode refid="25919" relation="include">
        </childnode>
        <childnode refid="25930" relation="include">
        </childnode>
        <childnode refid="25931" relation="include">
        </childnode>
        <childnode refid="25936" relation="include">
        </childnode>
        <childnode refid="25934" relation="include">
        </childnode>
        <childnode refid="25938" relation="include">
        </childnode>
        <childnode refid="25904" relation="include">
        </childnode>
        <childnode refid="25939" relation="include">
        </childnode>
        <childnode refid="25903" relation="include">
        </childnode>
        <childnode refid="25940" relation="include">
        </childnode>
        <childnode refid="25941" relation="include">
        </childnode>
        <childnode refid="25942" relation="include">
        </childnode>
      </node>
      <node id="25910">
        <label>ostream</label>
      </node>
      <node id="25940">
        <label>limits.h</label>
      </node>
      <node id="25943">
        <label>storage/TableDiff.h</label>
        <link refid="_table_diff_8h"/>
        <childnode refid="25904" relation="include">
        </childnode>
        <childnode refid="25939" relation="include">
        </childnode>
        <childnode refid="25903" relation="include">
        </childnode>
        <childnode refid="25908" relation="include">
        </childnode>
      </node>
      <node id="25931">
        <label>storage/DictionaryIterator.h</label>
        <link refid="_dictionary_iterator_8h"/>
        <childnode refid="25932" relation="include">
        </childnode>
        <childnode refid="25933" relation="include">
        </childnode>
      </node>
      <node id="25919">
        <label>storage/AbstractDictionary.h</label>
        <link refid="_abstract_dictionary_8h"/>
        <childnode refid="25904" relation="include">
        </childnode>
        <childnode refid="25901" relation="include">
        </childnode>
        <childnode refid="25903" relation="include">
        </childnode>
        <childnode refid="25920" relation="include">
        </childnode>
        <childnode refid="25924" relation="include">
        </childnode>
        <childnode refid="25926" relation="include">
        </childnode>
        <childnode refid="25908" relation="include">
        </childnode>
      </node>
      <node id="25937">
        <label>string.h</label>
      </node>
      <node id="25905">
        <label>storage/AbstractTable.h</label>
        <link refid="_abstract_table_8h"/>
        <childnode refid="25902" relation="include">
        </childnode>
        <childnode refid="25903" relation="include">
        </childnode>
        <childnode refid="25906" relation="include">
        </childnode>
        <childnode refid="25904" relation="include">
        </childnode>
        <childnode refid="25901" relation="include">
        </childnode>
        <childnode refid="25899" relation="include">
        </childnode>
        <childnode refid="25907" relation="include">
        </childnode>
        <childnode refid="25908" relation="include">
        </childnode>
        <childnode refid="25914" relation="include">
        </childnode>
        <childnode refid="25915" relation="include">
        </childnode>
      </node>
      <node id="25907">
        <label>storage/AbstractResource.h</label>
        <link refid="_abstract_resource_8h"/>
      </node>
      <node id="25944">
        <label>storage/PrettyPrinter.h</label>
        <link refid="_pretty_printer_8h"/>
        <childnode refid="25899" relation="include">
        </childnode>
      </node>
      <node id="25941">
        <label>boost/unordered_map.hpp</label>
      </node>
      <node id="25904">
        <label>vector</label>
      </node>
      <node id="25898">
        <label>gtest/gtest.h</label>
      </node>
      <node id="25899">
        <label>helper/types.h</label>
        <link refid="types_8h"/>
        <childnode refid="25900" relation="include">
        </childnode>
        <childnode refid="25901" relation="include">
        </childnode>
        <childnode refid="25902" relation="include">
        </childnode>
        <childnode refid="25903" relation="include">
        </childnode>
        <childnode refid="25904" relation="include">
        </childnode>
      </node>
      <node id="25932">
        <label>storage/BaseIterator.h</label>
        <link refid="_base_iterator_8h"/>
      </node>
      <node id="25920">
        <label>memory/StrategizedAllocator.h</label>
        <link refid="_strategized_allocator_8h"/>
        <childnode refid="25921" relation="include">
        </childnode>
        <childnode refid="25922" relation="include">
        </childnode>
        <childnode refid="25923" relation="include">
        </childnode>
        <childnode refid="25906" relation="include">
        </childnode>
      </node>
      <node id="25918">
        <label>iostream</label>
      </node>
      <node id="25914">
        <label>storage/ColumnMetadata.h</label>
        <link refid="_column_metadata_8h"/>
        <childnode refid="25908" relation="include">
        </childnode>
        <childnode refid="25901" relation="include">
        </childnode>
        <childnode refid="25906" relation="include">
        </childnode>
      </node>
      <node id="25912">
        <label>boost/mpl/map.hpp</label>
      </node>
      <node id="25934">
        <label>storage/AbstractAllocatedDictionary.h</label>
        <link refid="_abstract_allocated_dictionary_8h"/>
      </node>
      <node id="25924">
        <label>memory/MallocStrategy.h</label>
        <link refid="_malloc_strategy_8h"/>
        <childnode refid="25918" relation="include">
        </childnode>
        <childnode refid="25900" relation="include">
        </childnode>
        <childnode refid="25925" relation="include">
        </childnode>
      </node>
      <node id="25916">
        <label>storage/OrderPreservingDictionary.h</label>
        <link refid="_order_preserving_dictionary_8h"/>
        <childnode refid="25917" relation="include">
        </childnode>
        <childnode refid="25918" relation="include">
        </childnode>
        <childnode refid="25903" relation="include">
        </childnode>
        <childnode refid="25908" relation="include">
        </childnode>
        <childnode refid="25919" relation="include">
        </childnode>
        <childnode refid="25930" relation="include">
        </childnode>
        <childnode refid="25931" relation="include">
        </childnode>
        <childnode refid="25934" relation="include">
        </childnode>
        <childnode refid="25932" relation="include">
        </childnode>
      </node>
      <node id="25922">
        <label>algorithm</label>
      </node>
      <node id="25928">
        <label>stdio.h</label>
      </node>
      <node id="25925">
        <label>cstring</label>
      </node>
      <node id="25936">
        <label>storage/csb_tree.h</label>
        <link refid="csb__tree_8h"/>
        <childnode refid="25904" relation="include">
        </childnode>
        <childnode refid="25918" relation="include">
        </childnode>
        <childnode refid="25923" relation="include">
        </childnode>
        <childnode refid="25903" relation="include">
        </childnode>
        <childnode refid="25937" relation="include">
        </childnode>
        <childnode refid="25917" relation="include">
        </childnode>
        <childnode refid="25933" relation="include">
        </childnode>
      </node>
      <node id="25903">
        <label>memory</label>
      </node>
      <node id="25908">
        <label>storage/storage_types.h</label>
        <link refid="storage__types_8h"/>
        <childnode refid="25904" relation="include">
        </childnode>
        <childnode refid="25901" relation="include">
        </childnode>
        <childnode refid="25906" relation="include">
        </childnode>
        <childnode refid="25909" relation="include">
        </childnode>
        <childnode refid="25910" relation="include">
        </childnode>
        <childnode refid="25911" relation="include">
        </childnode>
        <childnode refid="25912" relation="include">
        </childnode>
        <childnode refid="25913" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="_table_equality_test_8cpp_1a3d10ec0159f56d4b832bbe90344504a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string schemeErrors</definition>
        <argsstring>(TableDiff diff, const char *relationName, tblptr table)</argsstring>
        <name>schemeErrors</name>
        <param>
          <type><ref refid="class_table_diff" kindref="compound">TableDiff</ref></type>
          <declname>diff</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>relationName</declname>
        </param>
        <param>
          <type><ref refid="_table_equality_test_8h_1a941f39a6ea86947b47e38546819cbfed" kindref="member">tblptr</ref></type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/grund/hyrise/src/lib/testing/TableEqualityTest.cpp" line="8" bodyfile="/home/grund/hyrise/src/lib/testing/TableEqualityTest.cpp" bodystart="8" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="_table_equality_test_8cpp_1afd47ce112a51a05ca61389b20e6c2648" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string rowErrors</definition>
        <argsstring>(TableDiff diff, const char *baseRelationName, const char *otherRelationName)</argsstring>
        <name>rowErrors</name>
        <param>
          <type><ref refid="class_table_diff" kindref="compound">TableDiff</ref></type>
          <declname>diff</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>baseRelationName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>otherRelationName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/grund/hyrise/src/lib/testing/TableEqualityTest.cpp" line="47" bodyfile="/home/grund/hyrise/src/lib/testing/TableEqualityTest.cpp" bodystart="47" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="_table_equality_test_8cpp_1a8db08bd8100b401a61e929018931a1c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string rowPositionErrors</definition>
        <argsstring>(TableDiff diff, const char *baseRelationName, const char *otherRelationName)</argsstring>
        <name>rowPositionErrors</name>
        <param>
          <type><ref refid="class_table_diff" kindref="compound">TableDiff</ref></type>
          <declname>diff</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>baseRelationName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>otherRelationName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/grund/hyrise/src/lib/testing/TableEqualityTest.cpp" line="62" bodyfile="/home/grund/hyrise/src/lib/testing/TableEqualityTest.cpp" bodystart="62" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="_table_equality_test_8cpp_1a8fe2efef865d866c1999d0c7a2389ab7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>::testing::AssertionResult</type>
        <definition>::testing::AssertionResult RelationEquals</definition>
        <argsstring>(const char *left_exp, const char *right_exp, tblptr left, tblptr right)</argsstring>
        <name>RelationEquals</name>
        <param>
          <type>const char *</type>
          <declname>left_exp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>right_exp</declname>
        </param>
        <param>
          <type><ref refid="_table_equality_test_8h_1a941f39a6ea86947b47e38546819cbfed" kindref="member">tblptr</ref></type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="_table_equality_test_8h_1a941f39a6ea86947b47e38546819cbfed" kindref="member">tblptr</ref></type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compare two relations (i.e. tables) for value equality</para><para>Compares relations whether they have equal contents. handles tables from a relational standpoint, thus order is not important.</para><para>EXPECT_RELATION_[N]EQ compares from a relational standpoint, thus order of rows and the order of fields is not checked EXPECT_SORTED_RELATION_[N]EQ also considers the order of the rows.</para><para>Use via: <ref refid="_table_equality_test_8h_1ac00f18695844489219135a8d85402964" kindref="member">EXPECT_RELATION_EQ(result, reference)</ref>; or: <ref refid="_table_equality_test_8h_1a18ab677afa9251e63c1ff8b77b8ebff4" kindref="member">EXPECT_SORTED_RELATION_EQ(result, reference)</ref>;</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">left_exp</parametername>
</parameternamelist>
<parameterdescription>
<para>Left expression string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">right_exp</parametername>
</parameternamelist>
<parameterdescription>
<para>Right expression string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">left</parametername>
</parameternamelist>
<parameterdescription>
<para>Table to compare </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">right</parametername>
</parameternamelist>
<parameterdescription>
<para>Table to compare </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/grund/hyrise/src/lib/testing/TableEqualityTest.cpp" line="81" bodyfile="/home/grund/hyrise/src/lib/testing/TableEqualityTest.cpp" bodystart="79" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="_table_equality_test_8cpp_1ac97be1916956016ba3035fd0ed073184" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>::testing::AssertionResult</type>
        <definition>::testing::AssertionResult RelationNotEquals</definition>
        <argsstring>(const char *left_exp, const char *right_exp, tblptr left, tblptr right)</argsstring>
        <name>RelationNotEquals</name>
        <param>
          <type>const char *</type>
          <declname>left_exp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>right_exp</declname>
        </param>
        <param>
          <type><ref refid="_table_equality_test_8h_1a941f39a6ea86947b47e38546819cbfed" kindref="member">tblptr</ref></type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="_table_equality_test_8h_1a941f39a6ea86947b47e38546819cbfed" kindref="member">tblptr</ref></type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/grund/hyrise/src/lib/testing/TableEqualityTest.cpp" line="108" bodyfile="/home/grund/hyrise/src/lib/testing/TableEqualityTest.cpp" bodystart="106" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="_table_equality_test_8cpp_1a2b3a7ff93e79a3f0fe731eee1ff46a50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>::testing::AssertionResult</type>
        <definition>::testing::AssertionResult SortedRelationEquals</definition>
        <argsstring>(const char *left_exp, const char *right_exp, tblptr left, tblptr right)</argsstring>
        <name>SortedRelationEquals</name>
        <param>
          <type>const char *</type>
          <declname>left_exp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>right_exp</declname>
        </param>
        <param>
          <type><ref refid="_table_equality_test_8h_1a941f39a6ea86947b47e38546819cbfed" kindref="member">tblptr</ref></type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="_table_equality_test_8h_1a941f39a6ea86947b47e38546819cbfed" kindref="member">tblptr</ref></type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/grund/hyrise/src/lib/testing/TableEqualityTest.cpp" line="122" bodyfile="/home/grund/hyrise/src/lib/testing/TableEqualityTest.cpp" bodystart="119" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="_table_equality_test_8cpp_1a14b6dfdc9d70ded5227acfaa254e600d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>::testing::AssertionResult</type>
        <definition>::testing::AssertionResult SortedRelationNotEquals</definition>
        <argsstring>(const char *left_exp, const char *right_exp, tblptr left, tblptr right)</argsstring>
        <name>SortedRelationNotEquals</name>
        <param>
          <type>const char *</type>
          <declname>left_exp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>right_exp</declname>
        </param>
        <param>
          <type><ref refid="_table_equality_test_8h_1a941f39a6ea86947b47e38546819cbfed" kindref="member">tblptr</ref></type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="_table_equality_test_8h_1a941f39a6ea86947b47e38546819cbfed" kindref="member">tblptr</ref></type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/grund/hyrise/src/lib/testing/TableEqualityTest.cpp" line="150" bodyfile="/home/grund/hyrise/src/lib/testing/TableEqualityTest.cpp" bodystart="148" bodyend="159"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2012<sp/>Hasso-Plattner-Institut<sp/>fuer<sp/>Softwaresystemtechnik<sp/>GmbH.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_table_equality_test_8h" kindref="compound">TableEqualityTest.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_abstract_table_8h" kindref="compound">storage/AbstractTable.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_table_diff_8h" kindref="compound">storage/TableDiff.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_pretty_printer_8h" kindref="compound">storage/PrettyPrinter.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8" refid="_table_equality_test_8cpp_1a3d10ec0159f56d4b832bbe90344504a7" refkind="member"><highlight class="normal">std::string<sp/><ref refid="_table_equality_test_8cpp_1a3d10ec0159f56d4b832bbe90344504a7" kindref="member">schemeErrors</ref>(<ref refid="class_table_diff" kindref="compound">TableDiff</ref><sp/>diff,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>relationName,<sp/><ref refid="_table_equality_test_8h_1a941f39a6ea86947b47e38546819cbfed" kindref="member">tblptr</ref><sp/>table)<sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>fieldError,<sp/>fieldTypeError;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/>std::stringstream<sp/>buf;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="storage__types_8h_1a5ce4ecb27464dc24ba394527510dd89b" kindref="member">field_t</ref><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>diff.<ref refid="class_table_diff_1abd2d1d75c9d5a0e0b97a9abfe3bcff56" kindref="member">fields</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(diff.<ref refid="class_table_diff_1abd2d1d75c9d5a0e0b97a9abfe3bcff56" kindref="member">fields</ref>[i]<sp/>!=<sp/><ref refid="class_table_diff_1a9d12bc57dc56ca5498e945912afb1879ae9cfc8f658090daf11e84f27bac57879" kindref="member">TableDiff::FieldCorrect</ref>)<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(diff.<ref refid="class_table_diff_1abd2d1d75c9d5a0e0b97a9abfe3bcff56" kindref="member">fields</ref>[i]<sp/>==<sp/><ref refid="class_table_diff_1a9d12bc57dc56ca5498e945912afb1879a18bfca2f3d97c9d43380a85a7bf498eb" kindref="member">TableDiff::FieldWrongType</ref>)<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehyrise_1_1types_1a4687304ae16d58f6e54a4c37f8664a7e" kindref="member">hyrise::types::type_t</ref><sp/>type;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(table-&gt;typeOfColumn(i))<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="storage__types_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6a90453dde1506c63dbaaa7a1a363a06a9" kindref="member">IntegerType</ref>:<sp/>type<sp/>=<sp/><ref refid="namespacehyrise_1_1types_1ac76e2caf2685fc6dc28916cae531fc64" kindref="member">hyrise::types::integer_t</ref>;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="storage__types_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6a866d24e407b4ee66d3efe59486be6db4" kindref="member">FloatType</ref>:<sp/>type<sp/>=<sp/><ref refid="namespacehyrise_1_1types_1a1d64e8103627a64c2239c710a9b22d4c" kindref="member">hyrise::types::float_t</ref>;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="storage__types_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6a83ccab8dfcfc3a9e8656224313fb61f3" kindref="member">StringType</ref>:<sp/>type<sp/>=<sp/><ref refid="namespacehyrise_1_1types_1afeebc86251ddc26b11d8fc52aababb7f" kindref="member">hyrise::types::string_t</ref>;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fieldTypeError.push_back(table-&gt;nameOfColumn(i)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>+<sp/>type<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fieldError.push_back(table-&gt;nameOfColumn(i));</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>(fieldError.empty()<sp/>&amp;&amp;<sp/>fieldTypeError.empty())<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>buf<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>in<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>relationName<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;s<sp/>relation<sp/>scheme:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fieldError.empty())<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;mismatched<sp/>fields:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>fieldError.size()-1;<sp/>i++)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf<sp/>&lt;&lt;<sp/>fieldError[i]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf<sp/>&lt;&lt;<sp/>fieldError.back()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fieldTypeError.empty())<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;field<sp/>type<sp/>mismatches:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>fieldTypeError.size()-1;<sp/>i++)</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf<sp/>&lt;&lt;<sp/>fieldTypeError[i]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf<sp/>&lt;&lt;<sp/>fieldTypeError.back()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buf.str();</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="_table_equality_test_8cpp_1afd47ce112a51a05ca61389b20e6c2648" refkind="member"><highlight class="normal">std::string<sp/><ref refid="_table_equality_test_8cpp_1afd47ce112a51a05ca61389b20e6c2648" kindref="member">rowErrors</ref>(<ref refid="class_table_diff" kindref="compound">TableDiff</ref><sp/>diff,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>baseRelationName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>otherRelationName)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(diff.<ref refid="class_table_diff_1ac1c038a5d4ad5bdf7679d6c1894ef54c" kindref="member">wrongRows</ref>.empty())</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>std::stringstream<sp/>buf;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>buf<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;rows<sp/>in<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>baseRelationName<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>that<sp/>are<sp/>not<sp/>in<sp/>\&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>otherRelationName<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>diff.<ref refid="class_table_diff_1ac1c038a5d4ad5bdf7679d6c1894ef54c" kindref="member">wrongRows</ref>.size()-1;<sp/>++i)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>buf<sp/>&lt;&lt;<sp/>diff.<ref refid="class_table_diff_1ac1c038a5d4ad5bdf7679d6c1894ef54c" kindref="member">wrongRows</ref>[i]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>buf<sp/>&lt;&lt;<sp/>diff.<ref refid="class_table_diff_1ac1c038a5d4ad5bdf7679d6c1894ef54c" kindref="member">wrongRows</ref>.back()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buf.str();</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="_table_equality_test_8cpp_1a8db08bd8100b401a61e929018931a1c9" refkind="member"><highlight class="normal">std::string<sp/><ref refid="_table_equality_test_8cpp_1a8db08bd8100b401a61e929018931a1c9" kindref="member">rowPositionErrors</ref>(<ref refid="class_table_diff" kindref="compound">TableDiff</ref><sp/>diff,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>baseRelationName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>otherRelationName)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(diff.<ref refid="class_table_diff_1a4be97a2ae477903c0c85972bda950860" kindref="member">falsePositionRows</ref>.empty())</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>std::stringstream<sp/>buf;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>buf<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;rows<sp/>in<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>baseRelationName<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>that<sp/>are<sp/>not<sp/>in<sp/>the<sp/>same<sp/>place<sp/>as<sp/>in\&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>otherRelationName<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>diff.<ref refid="class_table_diff_1a4be97a2ae477903c0c85972bda950860" kindref="member">falsePositionRows</ref>.begin();<sp/>i<sp/>!=<sp/>diff.<ref refid="class_table_diff_1a4be97a2ae477903c0c85972bda950860" kindref="member">falsePositionRows</ref>.end();<sp/>++i)</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>buf<sp/>&lt;&lt;<sp/>(*i).first<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(*i).second<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;),<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//TODO:<sp/>don&apos;t<sp/>let<sp/>the<sp/>list<sp/>end<sp/>with<sp/>&apos;,&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//buf<sp/>&lt;&lt;<sp/>(*diff.falsePositionRows.end()).first<sp/>&lt;&lt;<sp/>&quot;(&quot;<sp/>&lt;&lt;<sp/>(*diff.falsePositionRows.end()).second<sp/>&lt;&lt;<sp/>&quot;)&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buf.str();</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="_table_equality_test_8h_1a8fe2efef865d866c1999d0c7a2389ab7" refkind="member"><highlight class="normal">::testing::AssertionResult<sp/><ref refid="_table_equality_test_8cpp_1a8fe2efef865d866c1999d0c7a2389ab7" kindref="member">RelationEquals</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>left_exp,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>right_exp,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_table_equality_test_8h_1a941f39a6ea86947b47e38546819cbfed" kindref="member">tblptr</ref><sp/>left,<sp/><ref refid="_table_equality_test_8h_1a941f39a6ea86947b47e38546819cbfed" kindref="member">tblptr</ref><sp/>right)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>resultL2R<sp/>=<sp/><ref refid="class_table_diff_1a6b883a5406b2f00a527e9e2b708d8ce5" kindref="member">TableDiff::diffTables</ref>(left.get(),<sp/><sp/>right.get());</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>resultR2L<sp/>=<sp/><ref refid="class_table_diff_1a6b883a5406b2f00a527e9e2b708d8ce5" kindref="member">TableDiff::diffTables</ref>(right.get(),<sp/>left.get());</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resultL2R.equal()<sp/>&amp;&amp;<sp/>resultR2L.equal())<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::testing::AssertionSuccess();</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>std::stringstream<sp/>buf;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><ref refid="class_pretty_printer_1adbdaff3783e854cd32188e01251355a8" kindref="member">PrettyPrinter::printDiff</ref>(left,<sp/>resultL2R,<sp/>buf,<sp/>left_exp);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>buf<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><ref refid="class_pretty_printer_1adbdaff3783e854cd32188e01251355a8" kindref="member">PrettyPrinter::printDiff</ref>(right,<sp/>resultR2L,<sp/>buf,<sp/>right_exp);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>buf<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>left_exp<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;is<sp/>not<sp/>an<sp/>equal<sp/>relation<sp/>to&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>right_exp<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><ref refid="_table_equality_test_8cpp_1a3d10ec0159f56d4b832bbe90344504a7" kindref="member">schemeErrors</ref>(resultL2R,<sp/>left_exp,<sp/>left)</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><ref refid="_table_equality_test_8cpp_1a3d10ec0159f56d4b832bbe90344504a7" kindref="member">schemeErrors</ref>(resultR2L,<sp/>right_exp,<sp/>right)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><ref refid="_table_equality_test_8cpp_1afd47ce112a51a05ca61389b20e6c2648" kindref="member">rowErrors</ref>(resultL2R,<sp/>left_exp,<sp/>right_exp)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><ref refid="_table_equality_test_8cpp_1afd47ce112a51a05ca61389b20e6c2648" kindref="member">rowErrors</ref>(resultR2L,<sp/>right_exp,<sp/>left_exp);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>return<sp/>::testing::AssertionFailure()<sp/>&lt;&lt;<sp/>buf.str();</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="_table_equality_test_8h_1ac97be1916956016ba3035fd0ed073184" refkind="member"><highlight class="normal">::testing::AssertionResult<sp/><ref refid="_table_equality_test_8cpp_1ac97be1916956016ba3035fd0ed073184" kindref="member">RelationNotEquals</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>left_exp,</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>right_exp,</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_table_equality_test_8h_1a941f39a6ea86947b47e38546819cbfed" kindref="member">tblptr</ref><sp/>left,<sp/><ref refid="_table_equality_test_8h_1a941f39a6ea86947b47e38546819cbfed" kindref="member">tblptr</ref><sp/>right)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>resultL2R<sp/>=<sp/><ref refid="class_table_diff_1a6b883a5406b2f00a527e9e2b708d8ce5" kindref="member">TableDiff::diffTables</ref>(left.get(),<sp/><sp/>right.get());</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>resultR2L<sp/>=<sp/><ref refid="class_table_diff_1a6b883a5406b2f00a527e9e2b708d8ce5" kindref="member">TableDiff::diffTables</ref>(right.get(),<sp/>left.get());</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resultL2R.equal()<sp/>&amp;&amp;<sp/>resultR2L.equal())</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::testing::AssertionFailure()<sp/>&lt;&lt;<sp/>left_exp<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>right_exp</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>are<sp/>not<sp/>expected<sp/>to<sp/>be<sp/>equal&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>return<sp/>::testing::AssertionSuccess();</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="_table_equality_test_8h_1a2b3a7ff93e79a3f0fe731eee1ff46a50" refkind="member"><highlight class="normal">::testing::AssertionResult<sp/><ref refid="_table_equality_test_8cpp_1a2b3a7ff93e79a3f0fe731eee1ff46a50" kindref="member">SortedRelationEquals</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>left_exp,</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>right_exp,</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_table_equality_test_8h_1a941f39a6ea86947b47e38546819cbfed" kindref="member">tblptr</ref><sp/>left,</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_table_equality_test_8h_1a941f39a6ea86947b47e38546819cbfed" kindref="member">tblptr</ref><sp/>right)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>resultL2R<sp/>=<sp/><ref refid="class_table_diff_1a6b883a5406b2f00a527e9e2b708d8ce5" kindref="member">TableDiff::diffTables</ref>(left.get(),<sp/><sp/>right.get());</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>resultR2L<sp/>=<sp/><ref refid="class_table_diff_1a6b883a5406b2f00a527e9e2b708d8ce5" kindref="member">TableDiff::diffTables</ref>(right.get(),<sp/>left.get());</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resultL2R.equal()<sp/>&amp;&amp;<sp/>resultR2L.equal())<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::testing::AssertionSuccess();</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>std::stringstream<sp/>buf;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><ref refid="class_pretty_printer_1adbdaff3783e854cd32188e01251355a8" kindref="member">PrettyPrinter::printDiff</ref>(left,<sp/>resultL2R,<sp/>buf,<sp/>left_exp);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>buf<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><ref refid="class_pretty_printer_1adbdaff3783e854cd32188e01251355a8" kindref="member">PrettyPrinter::printDiff</ref>(right,<sp/>resultR2L,<sp/>buf,<sp/>right_exp);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>buf<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>left_exp<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;is<sp/>not<sp/>an<sp/>equal<sp/>sorted<sp/>relation<sp/>to&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>right_exp<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><ref refid="_table_equality_test_8cpp_1a3d10ec0159f56d4b832bbe90344504a7" kindref="member">schemeErrors</ref>(resultL2R,<sp/>left_exp,<sp/>left)</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><ref refid="_table_equality_test_8cpp_1a3d10ec0159f56d4b832bbe90344504a7" kindref="member">schemeErrors</ref>(resultR2L,<sp/>right_exp,<sp/>right)</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><ref refid="_table_equality_test_8cpp_1afd47ce112a51a05ca61389b20e6c2648" kindref="member">rowErrors</ref>(resultL2R,<sp/>left_exp,<sp/>right_exp)</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><ref refid="_table_equality_test_8cpp_1afd47ce112a51a05ca61389b20e6c2648" kindref="member">rowErrors</ref>(resultR2L,<sp/>right_exp,<sp/>left_exp)</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><ref refid="_table_equality_test_8cpp_1a8db08bd8100b401a61e929018931a1c9" kindref="member">rowPositionErrors</ref>(resultL2R,<sp/>left_exp,<sp/>right_exp);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>return<sp/>::testing::AssertionFailure()<sp/>&lt;&lt;<sp/>buf.str();</highlight></codeline>
<codeline lineno="146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148" refid="_table_equality_test_8h_1a14b6dfdc9d70ded5227acfaa254e600d" refkind="member"><highlight class="normal">::testing::AssertionResult<sp/><ref refid="_table_equality_test_8cpp_1a14b6dfdc9d70ded5227acfaa254e600d" kindref="member">SortedRelationNotEquals</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>left_exp,</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>right_exp,</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_table_equality_test_8h_1a941f39a6ea86947b47e38546819cbfed" kindref="member">tblptr</ref><sp/>left,<sp/><ref refid="_table_equality_test_8h_1a941f39a6ea86947b47e38546819cbfed" kindref="member">tblptr</ref><sp/>right)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>resultL2R<sp/>=<sp/><ref refid="class_table_diff_1a6b883a5406b2f00a527e9e2b708d8ce5" kindref="member">TableDiff::diffTables</ref>(left.get(),<sp/><sp/>right.get());</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>resultR2L<sp/>=<sp/><ref refid="class_table_diff_1a6b883a5406b2f00a527e9e2b708d8ce5" kindref="member">TableDiff::diffTables</ref>(right.get(),<sp/>left.get());</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resultL2R.equalSorted()<sp/>&amp;&amp;<sp/>resultR2L.equalSorted())</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::testing::AssertionFailure()<sp/>&lt;&lt;<sp/>left_exp<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>right_exp</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>are<sp/>not<sp/>expected<sp/>to<sp/>be<sp/>equal&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>return<sp/>::testing::AssertionSuccess();</highlight></codeline>
<codeline lineno="159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/grund/hyrise/src/lib/testing/TableEqualityTest.cpp"/>
  </compounddef>
</doxygen>
