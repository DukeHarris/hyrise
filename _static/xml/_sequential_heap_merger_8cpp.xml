<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.2">
  <compounddef id="_sequential_heap_merger_8cpp" kind="file">
    <compoundname>SequentialHeapMerger.cpp</compoundname>
    <includes refid="_sequential_heap_merger_8h" local="no">storage/SequentialHeapMerger.h</includes>
    <includes local="no">queue</includes>
    <incdepgraph>
      <node id="21798">
        <label>list</label>
      </node>
      <node id="21791">
        <label>boost/mpl/vector.hpp</label>
      </node>
      <node id="21828">
        <label>queue</label>
      </node>
      <node id="21820">
        <label>limits</label>
      </node>
      <node id="21818">
        <label>boost/functional/hash.hpp</label>
      </node>
      <node id="21782">
        <label>assert.h</label>
      </node>
      <node id="21793">
        <label>boost/lexical_cast.hpp</label>
      </node>
      <node id="21809">
        <label>boost/iterator/iterator_facade.hpp</label>
      </node>
      <node id="21800">
        <label>cstdint</label>
      </node>
      <node id="21806">
        <label>storage/BaseDictionary.h</label>
        <link refid="_base_dictionary_8h"/>
        <childnode refid="21785" relation="include">
        </childnode>
        <childnode refid="21794" relation="include">
        </childnode>
        <childnode refid="21807" relation="include">
        </childnode>
      </node>
      <node id="21789">
        <label>stdint.h</label>
      </node>
      <node id="21805">
        <label>stdlib.h</label>
      </node>
      <node id="21803">
        <label>errno.h</label>
      </node>
      <node id="21788">
        <label>stdexcept</label>
      </node>
      <node id="21787">
        <label>string</label>
      </node>
      <node id="21815">
        <label>map</label>
      </node>
      <node id="21780">
        <label>storage/ValueIdMap.hpp</label>
        <link refid="_value_id_map_8hpp"/>
        <childnode refid="21781" relation="include">
        </childnode>
        <childnode refid="21811" relation="include">
        </childnode>
      </node>
      <node id="21802">
        <label>memory/MemalignStrategy.h</label>
        <link refid="_memalign_strategy_8h"/>
        <childnode refid="21803" relation="include">
        </childnode>
        <childnode refid="21804" relation="include">
        </childnode>
        <childnode refid="21805" relation="include">
        </childnode>
      </node>
      <node id="21814">
        <label>exception</label>
      </node>
      <node id="21796">
        <label>stddef.h</label>
      </node>
      <node id="21811">
        <label>storage/OrderIndifferentDictionary.h</label>
        <link refid="_order_indifferent_dictionary_8h"/>
        <childnode refid="21785" relation="include">
        </childnode>
        <childnode refid="21794" relation="include">
        </childnode>
        <childnode refid="21806" relation="include">
        </childnode>
        <childnode refid="21807" relation="include">
        </childnode>
        <childnode refid="21812" relation="include">
        </childnode>
        <childnode refid="21810" relation="include">
        </childnode>
        <childnode refid="21814" relation="include">
        </childnode>
        <childnode refid="21786" relation="include">
        </childnode>
        <childnode refid="21815" relation="include">
        </childnode>
        <childnode refid="21784" relation="include">
        </childnode>
        <childnode refid="21816" relation="include">
        </childnode>
        <childnode refid="21817" relation="include">
        </childnode>
        <childnode refid="21818" relation="include">
        </childnode>
      </node>
      <node id="21790">
        <label>ostream</label>
      </node>
      <node id="21816">
        <label>limits.h</label>
      </node>
      <node id="21807">
        <label>storage/DictionaryIterator.h</label>
        <link refid="_dictionary_iterator_8h"/>
        <childnode refid="21808" relation="include">
        </childnode>
        <childnode refid="21809" relation="include">
        </childnode>
      </node>
      <node id="21794">
        <label>storage/AbstractDictionary.h</label>
        <link refid="_abstract_dictionary_8h"/>
        <childnode refid="21786" relation="include">
        </childnode>
        <childnode refid="21787" relation="include">
        </childnode>
        <childnode refid="21784" relation="include">
        </childnode>
        <childnode refid="21795" relation="include">
        </childnode>
        <childnode refid="21799" relation="include">
        </childnode>
        <childnode refid="21802" relation="include">
        </childnode>
        <childnode refid="21785" relation="include">
        </childnode>
      </node>
      <node id="21778">
        <label>src/lib/storage/SequentialHeapMerger.cpp</label>
        <link refid="SequentialHeapMerger.cpp"/>
        <childnode refid="21779" relation="include">
        </childnode>
        <childnode refid="21828" relation="include">
        </childnode>
      </node>
      <node id="21813">
        <label>string.h</label>
      </node>
      <node id="21819">
        <label>storage/AbstractTable.h</label>
        <link refid="_abstract_table_8h"/>
        <childnode refid="21820" relation="include">
        </childnode>
        <childnode refid="21784" relation="include">
        </childnode>
        <childnode refid="21788" relation="include">
        </childnode>
        <childnode refid="21786" relation="include">
        </childnode>
        <childnode refid="21787" relation="include">
        </childnode>
        <childnode refid="21821" relation="include">
        </childnode>
        <childnode refid="21822" relation="include">
        </childnode>
        <childnode refid="21785" relation="include">
        </childnode>
        <childnode refid="21823" relation="include">
        </childnode>
        <childnode refid="21780" relation="include">
        </childnode>
      </node>
      <node id="21822">
        <label>storage/AbstractResource.h</label>
        <link refid="_abstract_resource_8h"/>
      </node>
      <node id="21824">
        <label>storage/AbstractMerger.h</label>
        <link refid="_abstract_merger_8h"/>
        <childnode refid="21786" relation="include">
        </childnode>
        <childnode refid="21825" relation="include">
        </childnode>
        <childnode refid="21821" relation="include">
        </childnode>
        <childnode refid="21819" relation="include">
        </childnode>
        <childnode refid="21826" relation="include">
        </childnode>
      </node>
      <node id="21817">
        <label>boost/unordered_map.hpp</label>
      </node>
      <node id="21786">
        <label>vector</label>
      </node>
      <node id="21821">
        <label>helper/types.h</label>
        <link refid="types_8h"/>
        <childnode refid="21800" relation="include">
        </childnode>
        <childnode refid="21787" relation="include">
        </childnode>
        <childnode refid="21820" relation="include">
        </childnode>
        <childnode refid="21784" relation="include">
        </childnode>
        <childnode refid="21786" relation="include">
        </childnode>
      </node>
      <node id="21827">
        <label>storage/DictionaryPosition.h</label>
        <link refid="_dictionary_position_8h"/>
      </node>
      <node id="21779">
        <label>storage/SequentialHeapMerger.h</label>
        <link refid="_sequential_heap_merger_8h"/>
        <childnode refid="21780" relation="include">
        </childnode>
        <childnode refid="21819" relation="include">
        </childnode>
        <childnode refid="21824" relation="include">
        </childnode>
        <childnode refid="21827" relation="include">
        </childnode>
      </node>
      <node id="21808">
        <label>storage/BaseIterator.h</label>
        <link refid="_base_iterator_8h"/>
      </node>
      <node id="21795">
        <label>memory/StrategizedAllocator.h</label>
        <link refid="_strategized_allocator_8h"/>
        <childnode refid="21796" relation="include">
        </childnode>
        <childnode refid="21797" relation="include">
        </childnode>
        <childnode refid="21798" relation="include">
        </childnode>
        <childnode refid="21788" relation="include">
        </childnode>
      </node>
      <node id="21783">
        <label>iostream</label>
      </node>
      <node id="21823">
        <label>storage/ColumnMetadata.h</label>
        <link refid="_column_metadata_8h"/>
        <childnode refid="21785" relation="include">
        </childnode>
        <childnode refid="21787" relation="include">
        </childnode>
        <childnode refid="21788" relation="include">
        </childnode>
      </node>
      <node id="21825">
        <label>unordered_map</label>
      </node>
      <node id="21792">
        <label>boost/mpl/map.hpp</label>
      </node>
      <node id="21826">
        <label>storage/TableUtils.h</label>
        <link refid="_table_utils_8h"/>
        <childnode refid="21784" relation="include">
        </childnode>
        <childnode refid="21825" relation="include">
        </childnode>
      </node>
      <node id="21810">
        <label>storage/AbstractAllocatedDictionary.h</label>
        <link refid="_abstract_allocated_dictionary_8h"/>
      </node>
      <node id="21799">
        <label>memory/MallocStrategy.h</label>
        <link refid="_malloc_strategy_8h"/>
        <childnode refid="21783" relation="include">
        </childnode>
        <childnode refid="21800" relation="include">
        </childnode>
        <childnode refid="21801" relation="include">
        </childnode>
      </node>
      <node id="21781">
        <label>storage/OrderPreservingDictionary.h</label>
        <link refid="_order_preserving_dictionary_8h"/>
        <childnode refid="21782" relation="include">
        </childnode>
        <childnode refid="21783" relation="include">
        </childnode>
        <childnode refid="21784" relation="include">
        </childnode>
        <childnode refid="21785" relation="include">
        </childnode>
        <childnode refid="21794" relation="include">
        </childnode>
        <childnode refid="21806" relation="include">
        </childnode>
        <childnode refid="21807" relation="include">
        </childnode>
        <childnode refid="21810" relation="include">
        </childnode>
        <childnode refid="21808" relation="include">
        </childnode>
      </node>
      <node id="21797">
        <label>algorithm</label>
      </node>
      <node id="21804">
        <label>stdio.h</label>
      </node>
      <node id="21801">
        <label>cstring</label>
      </node>
      <node id="21812">
        <label>storage/csb_tree.h</label>
        <link refid="csb__tree_8h"/>
        <childnode refid="21786" relation="include">
        </childnode>
        <childnode refid="21783" relation="include">
        </childnode>
        <childnode refid="21798" relation="include">
        </childnode>
        <childnode refid="21784" relation="include">
        </childnode>
        <childnode refid="21813" relation="include">
        </childnode>
        <childnode refid="21782" relation="include">
        </childnode>
        <childnode refid="21809" relation="include">
        </childnode>
      </node>
      <node id="21784">
        <label>memory</label>
      </node>
      <node id="21785">
        <label>storage/storage_types.h</label>
        <link refid="storage__types_8h"/>
        <childnode refid="21786" relation="include">
        </childnode>
        <childnode refid="21787" relation="include">
        </childnode>
        <childnode refid="21788" relation="include">
        </childnode>
        <childnode refid="21789" relation="include">
        </childnode>
        <childnode refid="21790" relation="include">
        </childnode>
        <childnode refid="21791" relation="include">
        </childnode>
        <childnode refid="21792" relation="include">
        </childnode>
        <childnode refid="21793" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2012<sp/>Hasso-Plattner-Institut<sp/>fuer<sp/>Softwaresystemtechnik<sp/>GmbH.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_sequential_heap_merger_8h" kindref="compound">storage/SequentialHeapMerger.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;queue&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6" refid="class_sequential_heap_merger_1a85f8bb15c2231be98f2db8e66a530a60" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sequential_heap_merger_1a85f8bb15c2231be98f2db8e66a530a60" kindref="member">SequentialHeapMerger::mergeValues</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;hyrise::storage::c_atable_ptr_t<sp/>&gt;<sp/>&amp;input_tables,</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehyrise_1_1storage_1a21d5e900c20019710828c453eaded1ee" kindref="member">hyrise::storage::atable_ptr_t</ref><sp/>merged_table,</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacehyrise_1_1storage_1a8addaea8b5301cc30c8f8f634b531127" kindref="member">hyrise::storage::column_mapping_t</ref><sp/>&amp;column_mapping,</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>newSize)<sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/>std::vector&lt;value_id_mapping_t&gt;<sp/>mappingPerAtrtibute(input_tables[0]-&gt;columnCount());</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>kv:<sp/>column_mapping)<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;source<sp/>=<sp/>kv.first;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;destination<sp/>=<sp/>kv.second;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(merged_table-&gt;metadataAt(destination)-&gt;getType())<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="storage__types_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6a90453dde1506c63dbaaa7a1a363a06a9" kindref="member">IntegerType</ref>:</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mergeValues&lt;hyrise_int_t&gt;(input_tables,<sp/>source,<sp/>merged_table,<sp/>destination,<sp/>mappingPerAtrtibute[source]);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="storage__types_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6a866d24e407b4ee66d3efe59486be6db4" kindref="member">FloatType</ref>:</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mergeValues&lt;hyrise_float_t&gt;(input_tables,<sp/>source,<sp/>merged_table,<sp/>destination,<sp/>mappingPerAtrtibute[source]);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="storage__types_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6a83ccab8dfcfc3a9e8656224313fb61f3" kindref="member">StringType</ref>:</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mergeValues&lt;hyrise_string_t&gt;(input_tables,<sp/>source,<sp/>merged_table,<sp/>destination,<sp/>mappingPerAtrtibute[source]);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>merged_table-&gt;resize(newSize);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>after<sp/>the<sp/>dictionaries<sp/>are<sp/>merged<sp/>copy<sp/>the<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>kv:<sp/>column_mapping)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;source<sp/>=<sp/>kv.first;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;destination<sp/>=<sp/>kv.second;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>the<sp/>actual<sp/>values<sp/>and<sp/>apply<sp/>mapping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_sequential_heap_merger_1a187771b8a7231ae0f76bbc3f49d98ac9" kindref="member">copyValues</ref>(input_tables,<sp/>source,<sp/>merged_table,<sp/>destination,<sp/>mappingPerAtrtibute[source]);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="48" refid="class_sequential_heap_merger_1a7fddd5002a9c79d711d26fbd030457dd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sequential_heap_merger_1a85f8bb15c2231be98f2db8e66a530a60" kindref="member">SequentialHeapMerger::mergeValues</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;hyrise::storage::c_atable_ptr_t<sp/>&gt;<sp/>&amp;input_tables,</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>source_column_index,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehyrise_1_1storage_1a21d5e900c20019710828c453eaded1ee" kindref="member">hyrise::storage::atable_ptr_t</ref><sp/>merged_table,</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>destination_column_index,</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sequential_heap_merger_1a4e7cb331dfb367e2a1d479f833d4b1db" kindref="member">value_id_mapping_t</ref><sp/>&amp;value_id_mapping)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>std::vector&lt;AbstractTable::SharedDictionaryPtr<sp/>&gt;<sp/>value_id_maps;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><ref refid="class_abstract_table_1af76ff827deb697db8077a90c450381ab" kindref="member">AbstractTable::SharedDictionaryPtr</ref><sp/>new_dict;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>shortcut<sp/>for<sp/>dicts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>value_id_maps.reserve(input_tables.size());</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>table<sp/>=<sp/>0;<sp/>table<sp/>&lt;<sp/>input_tables.size();<sp/>table++)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((merged_table-&gt;metadataAt(destination_column_index)-&gt;getType()<sp/>!=</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input_tables[table]-&gt;metadataAt(source_column_index)-&gt;getType()))<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Dictionary<sp/>types<sp/>don&apos;t<sp/>match&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dict<sp/>=<sp/>std::dynamic_pointer_cast&lt;<ref refid="class_base_dictionary" kindref="compound">BaseDictionary&lt;T&gt;</ref>&gt;(input_tables[table]-&gt;dictionaryAt(source_column_index));</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>value_id_maps.push_back(dict);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>new<sp/>BaseDictionary<sp/>-<sp/>shrink<sp/>when<sp/>merge<sp/>finished?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>new_dict<sp/>=<sp/>createNewDict&lt;T&gt;(input_tables,<sp/>value_id_maps,<sp/>value_id_mapping);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>new<sp/>value<sp/>id<sp/>map<sp/>for<sp/>column</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>merged_table-&gt;setDictionaryAt(new_dict,<sp/>destination_column_index);</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="77" refid="class_sequential_heap_merger_1aa2cb3f51b2874948224d45dd423c2f76" refkind="member"><highlight class="normal"><ref refid="class_abstract_table_1af76ff827deb697db8077a90c450381ab" kindref="member">AbstractTable::SharedDictionaryPtr</ref><sp/><ref refid="class_sequential_heap_merger_1aa2cb3f51b2874948224d45dd423c2f76" kindref="member">SequentialHeapMerger::createNewDict</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;hyrise::storage::c_atable_ptr_t<sp/>&gt;<sp/>&amp;input_tables,<sp/>std::vector&lt;AbstractTable::SharedDictionaryPtr<sp/>&gt;<sp/>&amp;value_id_maps,<sp/>std::vector&lt;std::vector&lt;value_id_t&gt;<sp/>&gt;<sp/>&amp;value_id_mapping)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><ref refid="class_abstract_table_1af76ff827deb697db8077a90c450381ab" kindref="member">AbstractTable::SharedDictionaryPtr</ref><sp/>new_dict;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>std::priority_queue&lt;DictionaryPosition&lt;T&gt;<sp/>&gt;<sp/>p_queue;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>new_dict_max_size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>T<sp/>last_value;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>init</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>value_id_mapping.resize(input_tables.size());</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>table<sp/>=<sp/>0;<sp/>table<sp/>&lt;<sp/>input_tables.size();<sp/>table++)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reserve<sp/>space<sp/>for<sp/>value<sp/>id<sp/>mapping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>value_id_mapping[table].resize(value_id_maps[table]-&gt;size());</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>insert<sp/>initial<sp/>value<sp/>in<sp/>queue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value_id_maps[table]-&gt;size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p_queue.push(<ref refid="class_dictionary_position" kindref="compound">DictionaryPosition&lt;T&gt;</ref>(table,<sp/>std::dynamic_pointer_cast&lt;<ref refid="class_base_dictionary" kindref="compound">BaseDictionary&lt;T&gt;</ref>&gt;(value_id_maps[table])-&gt;begin()));</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>new_dict_max_size<sp/>+=<sp/>value_id_maps[table]-&gt;size();</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>new<sp/>BaseDictionary<sp/>-<sp/>shrink<sp/>when<sp/>merge<sp/>finished?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>new_dict<sp/>=<sp/>std::make_shared&lt;OrderPreservingDictionary&lt;T&gt;&gt;(new_dict_max_size);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!p_queue.empty())<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_dictionary_position" kindref="compound">DictionaryPosition&lt;T&gt;</ref><sp/>dict_pos<sp/>=<sp/>p_queue.top();</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>p_queue.pop();</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>std::dynamic_pointer_cast&lt;<ref refid="class_base_dictionary" kindref="compound">BaseDictionary&lt;T&gt;</ref>&gt;(new_dict)-&gt;addValue(dict_pos.<ref refid="class_dictionary_position_1ad8496c58d8762dd929f902291c1bf69f" kindref="member">getValue</ref>());</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>last_value<sp/>=<sp/>dict_pos.<ref refid="class_dictionary_position_1ad8496c58d8762dd929f902291c1bf69f" kindref="member">getValue</ref>();</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>value_id_mapping[dict_pos.<ref refid="class_dictionary_position_1a47aad47813b634de61d355134dfa273d" kindref="member">index</ref>][dict_pos.<ref refid="class_dictionary_position_1a5611b380876e7cee650659ecf05c6b5d" kindref="member">it</ref>.getValueId()]<sp/>=<sp/>new_dict-&gt;size()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>dict_pos.<ref refid="class_dictionary_position_1a5611b380876e7cee650659ecf05c6b5d" kindref="member">it</ref>++;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::dynamic_pointer_cast&lt;<ref refid="class_base_dictionary" kindref="compound">BaseDictionary&lt;T&gt;</ref>&gt;(value_id_maps[dict_pos.<ref refid="class_dictionary_position_1a47aad47813b634de61d355134dfa273d" kindref="member">index</ref>])-&gt;<ref refid="class_base_dictionary_1a61461dc90085108337b8930923755870" kindref="member">end</ref>()<sp/>!=<sp/>dict_pos.<ref refid="class_dictionary_position_1a5611b380876e7cee650659ecf05c6b5d" kindref="member">it</ref>)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p_queue.push(dict_pos);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!p_queue.empty())<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_dictionary_position" kindref="compound">DictionaryPosition&lt;T&gt;</ref><sp/>dict_pos<sp/>=<sp/>p_queue.top();</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>p_queue.pop();</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dict_pos.<ref refid="class_dictionary_position_1ad8496c58d8762dd929f902291c1bf69f" kindref="member">getValue</ref>()<sp/>!=<sp/>last_value)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::dynamic_pointer_cast&lt;<ref refid="class_base_dictionary" kindref="compound">BaseDictionary&lt;T&gt;</ref>&gt;(new_dict)-&gt;addValue(dict_pos.<ref refid="class_dictionary_position_1ad8496c58d8762dd929f902291c1bf69f" kindref="member">getValue</ref>());</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>last_value<sp/>=<sp/>dict_pos.<ref refid="class_dictionary_position_1ad8496c58d8762dd929f902291c1bf69f" kindref="member">getValue</ref>();</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>value_id_mapping[dict_pos.<ref refid="class_dictionary_position_1a47aad47813b634de61d355134dfa273d" kindref="member">index</ref>][dict_pos.<ref refid="class_dictionary_position_1a5611b380876e7cee650659ecf05c6b5d" kindref="member">it</ref>.getValueId()]<sp/>=<sp/>new_dict-&gt;size()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>dict_pos.<ref refid="class_dictionary_position_1a5611b380876e7cee650659ecf05c6b5d" kindref="member">it</ref>++;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::dynamic_pointer_cast&lt;<ref refid="class_base_dictionary" kindref="compound">BaseDictionary&lt;T&gt;</ref>&gt;(value_id_maps[dict_pos.<ref refid="class_dictionary_position_1a47aad47813b634de61d355134dfa273d" kindref="member">index</ref>])-&gt;<ref refid="class_base_dictionary_1a61461dc90085108337b8930923755870" kindref="member">end</ref>()<sp/>!=<sp/>dict_pos.<ref refid="class_dictionary_position_1a5611b380876e7cee650659ecf05c6b5d" kindref="member">it</ref>)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p_queue.push(dict_pos);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>new_dict-&gt;shrink();</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_dict;</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135" refid="class_sequential_heap_merger_1a187771b8a7231ae0f76bbc3f49d98ac9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sequential_heap_merger_1a187771b8a7231ae0f76bbc3f49d98ac9" kindref="member">SequentialHeapMerger::copyValues</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;hyrise::storage::c_atable_ptr_t<sp/>&gt;<sp/>&amp;input_tables,</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>source_column_index,</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehyrise_1_1storage_1a21d5e900c20019710828c453eaded1ee" kindref="member">hyrise::storage::atable_ptr_t</ref><sp/>&amp;merged_table,</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>destination_column_index,</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;value_id_t&gt;<sp/>&gt;<sp/>&amp;value_id_mapping)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><ref refid="class_value_id" kindref="compound">ValueId</ref><sp/>value_id;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>all<sp/>value<sp/>ids<sp/>to<sp/>the<sp/>new<sp/>doc<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>apply<sp/>value<sp/>id<sp/>mapping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>merged_table_row<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>table<sp/>=<sp/>0;<sp/>table<sp/>&lt;<sp/>input_tables.size();<sp/>table++)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>input_tables[table]-&gt;size();<sp/>row++)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>value_id.<ref refid="class_value_id_1aba4b7fbd1c7acac6ae904e2e5862c7af" kindref="member">valueId</ref><sp/>=<sp/>input_tables[table]-&gt;getValueId(source_column_index,<sp/>row).valueId;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>value_id.<ref refid="class_value_id_1aba4b7fbd1c7acac6ae904e2e5862c7af" kindref="member">valueId</ref><sp/>=<sp/>value_id_mapping[table][value_id.<ref refid="class_value_id_1aba4b7fbd1c7acac6ae904e2e5862c7af" kindref="member">valueId</ref>];<sp/></highlight><highlight class="comment">//<sp/>translate<sp/>value<sp/>id<sp/>to<sp/>new<sp/>dict</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>merged_table-&gt;setValueId(destination_column_index,<sp/>merged_table_row,<sp/>value_id);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>merged_table_row++;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157" refid="class_sequential_heap_merger_1ad36db87cfd64e6f44baa329cca58cafc" refkind="member"><highlight class="normal"><ref refid="class_abstract_merger" kindref="compound">AbstractMerger</ref><sp/>*<ref refid="class_sequential_heap_merger_1ad36db87cfd64e6f44baa329cca58cafc" kindref="member">SequentialHeapMerger::copy</ref>()<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_sequential_heap_merger" kindref="compound">SequentialHeapMerger</ref>();</highlight></codeline>
<codeline lineno="159"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/grund/hyrise/src/lib/storage/SequentialHeapMerger.cpp"/>
  </compounddef>
</doxygen>
