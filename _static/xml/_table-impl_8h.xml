<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.2">
  <compounddef id="_table-impl_8h" kind="file">
    <compoundname>Table-impl.h</compoundname>
    <includes local="no">cmath</includes>
    <includes refid="_attribute_vector_factory_8h" local="yes">storage/AttributeVectorFactory.h</includes>
    <includedby refid="_table_8h" local="yes">src/lib/storage/Table.h</includedby>
    <incdepgraph>
      <node id="22837">
        <label>list</label>
      </node>
      <node id="22825">
        <label>atomic</label>
      </node>
      <node id="22832">
        <label>storage/BaseAllocatedAttributeVector.h</label>
        <link refid="_base_allocated_attribute_vector_8h"/>
        <childnode refid="22821" relation="include">
        </childnode>
        <childnode refid="22833" relation="include">
        </childnode>
      </node>
      <node id="22831">
        <label>boost/iterator/iterator_facade.hpp</label>
      </node>
      <node id="22840">
        <label>cstdint</label>
      </node>
      <node id="22824">
        <label>storage/FixedLengthVector.h</label>
        <link refid="_fixed_length_vector_8h"/>
        <childnode refid="22825" relation="include">
        </childnode>
        <childnode refid="22826" relation="include">
        </childnode>
        <childnode refid="22827" relation="include">
        </childnode>
        <childnode refid="22820" relation="include">
        </childnode>
        <childnode refid="22828" relation="include">
        </childnode>
        <childnode refid="22829" relation="include">
        </childnode>
        <childnode refid="22822" relation="include">
        </childnode>
        <childnode refid="22830" relation="include">
        </childnode>
        <childnode refid="22831" relation="include">
        </childnode>
        <childnode refid="22823" relation="include">
        </childnode>
        <childnode refid="22821" relation="include">
        </childnode>
        <childnode refid="22832" relation="include">
        </childnode>
        <childnode refid="22834" relation="include">
        </childnode>
        <childnode refid="22838" relation="include">
        </childnode>
      </node>
      <node id="22819">
        <label>storage/AttributeVectorFactory.h</label>
        <link refid="_attribute_vector_factory_8h"/>
        <childnode refid="22820" relation="include">
        </childnode>
        <childnode refid="22821" relation="include">
        </childnode>
        <childnode refid="22824" relation="include">
        </childnode>
        <childnode refid="22842" relation="include">
        </childnode>
      </node>
      <node id="22843">
        <label>stdint.h</label>
      </node>
      <node id="22818">
        <label>cmath</label>
      </node>
      <node id="22826">
        <label>errno.h</label>
      </node>
      <node id="22822">
        <label>stdexcept</label>
      </node>
      <node id="22829">
        <label>string</label>
      </node>
      <node id="22835">
        <label>stddef.h</label>
      </node>
      <node id="22830">
        <label>sstream</label>
      </node>
      <node id="22834">
        <label>memory/StrategizedAllocator.h</label>
        <link refid="_strategized_allocator_8h"/>
        <childnode refid="22835" relation="include">
        </childnode>
        <childnode refid="22836" relation="include">
        </childnode>
        <childnode refid="22837" relation="include">
        </childnode>
        <childnode refid="22822" relation="include">
        </childnode>
      </node>
      <node id="22827">
        <label>math.h</label>
      </node>
      <node id="22839">
        <label>iostream</label>
      </node>
      <node id="22823">
        <label>storage/AbstractAttributeVector.h</label>
        <link refid="_abstract_attribute_vector_8h"/>
      </node>
      <node id="22828">
        <label>mutex</label>
      </node>
      <node id="22842">
        <label>storage/BitCompressedVector.h</label>
        <link refid="_bit_compressed_vector_8h"/>
        <childnode refid="22827" relation="include">
        </childnode>
        <childnode refid="22843" relation="include">
        </childnode>
        <childnode refid="22841" relation="include">
        </childnode>
        <childnode refid="22828" relation="include">
        </childnode>
        <childnode refid="22829" relation="include">
        </childnode>
        <childnode refid="22822" relation="include">
        </childnode>
        <childnode refid="22823" relation="include">
        </childnode>
        <childnode refid="22821" relation="include">
        </childnode>
      </node>
      <node id="22817">
        <label>src/lib/storage/Table-impl.h</label>
        <link refid="Table-impl.h"/>
        <childnode refid="22818" relation="include">
        </childnode>
        <childnode refid="22819" relation="include">
        </childnode>
      </node>
      <node id="22821">
        <label>storage/BaseAttributeVector.h</label>
        <link refid="_base_attribute_vector_8h"/>
        <childnode refid="22820" relation="include">
        </childnode>
        <childnode refid="22822" relation="include">
        </childnode>
        <childnode refid="22823" relation="include">
        </childnode>
      </node>
      <node id="22838">
        <label>memory/MallocStrategy.h</label>
        <link refid="_malloc_strategy_8h"/>
        <childnode refid="22839" relation="include">
        </childnode>
        <childnode refid="22840" relation="include">
        </childnode>
        <childnode refid="22841" relation="include">
        </childnode>
      </node>
      <node id="22836">
        <label>algorithm</label>
      </node>
      <node id="22833">
        <label>stdio.h</label>
      </node>
      <node id="22841">
        <label>cstring</label>
      </node>
      <node id="22820">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="22899">
        <label>src/lib/storage.h</label>
        <link refid="storage_8h"/>
        <childnode refid="22860" relation="include">
        </childnode>
        <childnode refid="22861" relation="include">
        </childnode>
        <childnode refid="22862" relation="include">
        </childnode>
        <childnode refid="22863" relation="include">
        </childnode>
        <childnode refid="22864" relation="include">
        </childnode>
        <childnode refid="22865" relation="include">
        </childnode>
        <childnode refid="22866" relation="include">
        </childnode>
        <childnode refid="22867" relation="include">
        </childnode>
      </node>
      <node id="22906">
        <label>src/lib/io/shortcuts.cpp</label>
        <link refid="shortcuts_8cpp"/>
      </node>
      <node id="22901">
        <label>src/lib/access/InsertScan.cpp</label>
        <link refid="_insert_scan_8cpp"/>
      </node>
      <node id="22847">
        <label>src/lib/access/Layouter.cpp</label>
        <link refid="_layouter_8cpp"/>
      </node>
      <node id="22907">
        <label>src/lib/storage/Store.cpp</label>
        <link refid="_store_8cpp"/>
      </node>
      <node id="22894">
        <label>src/lib/storage/PointerCalculator.cpp</label>
        <link refid="_pointer_calculator_8cpp"/>
      </node>
      <node id="22910">
        <label>src/lib/storage/Table.cpp</label>
        <link refid="_table_8cpp"/>
      </node>
      <node id="22912">
        <label>src/lib/storage/TableFactory.cpp</label>
        <link refid="_table_factory_8cpp"/>
      </node>
      <node id="22850">
        <label>src/lib/access/SortScan.cpp</label>
        <link refid="lib_2access_2_sort_scan_8cpp"/>
      </node>
      <node id="22914">
        <label>src/lib/storage/TableGenerator.h</label>
        <link refid="_table_generator_8h"/>
        <childnode refid="22874" relation="include">
        </childnode>
        <childnode refid="22915" relation="include">
        </childnode>
        <childnode refid="22909" relation="include">
        </childnode>
        <childnode refid="22916" relation="include">
        </childnode>
        <childnode refid="22899" relation="include">
        </childnode>
      </node>
      <node id="22880">
        <label>src/lib/access/HashJoinProbe.cpp</label>
        <link refid="_hash_join_probe_8cpp"/>
      </node>
      <node id="22849">
        <label>src/lib/access/PrefixSum.cpp</label>
        <link refid="_prefix_sum_8cpp"/>
      </node>
      <node id="22904">
        <label>src/lib/access/UpdateScan.cpp</label>
        <link refid="_update_scan_8cpp"/>
      </node>
      <node id="22857">
        <label>src/lib/storage/MutableVerticalTable.h</label>
        <link refid="_mutable_vertical_table_8h"/>
        <childnode refid="22846" relation="include">
        </childnode>
        <childnode refid="22858" relation="include">
        </childnode>
        <childnode refid="22868" relation="include">
        </childnode>
        <childnode refid="22870" relation="include">
        </childnode>
        <childnode refid="22871" relation="include">
        </childnode>
        <childnode refid="22872" relation="include">
        </childnode>
        <childnode refid="22873" relation="include">
        </childnode>
        <childnode refid="22874" relation="include">
        </childnode>
        <childnode refid="22851" relation="include">
        </childnode>
        <childnode refid="22875" relation="include">
        </childnode>
        <childnode refid="22876" relation="include">
        </childnode>
        <childnode refid="22895" relation="include">
        </childnode>
        <childnode refid="22900" relation="include">
        </childnode>
        <childnode refid="22908" relation="include">
        </childnode>
        <childnode refid="22909" relation="include">
        </childnode>
        <childnode refid="22899" relation="include">
        </childnode>
      </node>
      <node id="22893">
        <label>src/lib/access/TableScan.cpp</label>
        <link refid="_table_scan_8cpp"/>
      </node>
      <node id="22875">
        <label>src/lib/storage/MutableVerticalTable.cpp</label>
        <link refid="_mutable_vertical_table_8cpp"/>
      </node>
      <node id="22868">
        <label>src/lib/access/MultiplyRefField.h</label>
        <link refid="_multiply_ref_field_8h"/>
        <childnode refid="22869" relation="include">
        </childnode>
      </node>
      <node id="22856">
        <label>src/lib/storage/HorizontalTable.cpp</label>
        <link refid="_horizontal_table_8cpp"/>
      </node>
      <node id="22867">
        <label>src/bin/perf_regression/UnionScan.cpp</label>
        <link refid="bin_2perf__regression_2_union_scan_8cpp"/>
      </node>
      <node id="22858">
        <label>src/lib/access/MergeJoin.hpp</label>
        <link refid="_merge_join_8hpp"/>
        <childnode refid="22859" relation="include">
        </childnode>
      </node>
      <node id="22882">
        <label>src/lib/access/Histogram.cpp</label>
        <link refid="_histogram_8cpp"/>
      </node>
      <node id="22883">
        <label>src/lib/access/RadixCluster.h</label>
        <link refid="_radix_cluster_8h"/>
        <childnode refid="22871" relation="include">
        </childnode>
      </node>
      <node id="22871">
        <label>src/lib/access/RadixCluster.cpp</label>
        <link refid="_radix_cluster_8cpp"/>
      </node>
      <node id="22897">
        <label>src/lib/io/TableDump.cpp</label>
        <link refid="_table_dump_8cpp"/>
      </node>
      <node id="22872">
        <label>src/lib/access/ScriptOperation.cpp</label>
        <link refid="_script_operation_8cpp"/>
      </node>
      <node id="22879">
        <label>src/lib/access/GroupByScan.cpp</label>
        <link refid="lib_2access_2_group_by_scan_8cpp"/>
      </node>
      <node id="22869">
        <label>src/lib/access/MultiplyRefField.cpp</label>
        <link refid="_multiply_ref_field_8cpp"/>
      </node>
      <node id="22863">
        <label>src/bin/perf_regression/JoinScan.cpp</label>
        <link refid="bin_2perf__regression_2_join_scan_8cpp"/>
      </node>
      <node id="22895">
        <label>src/lib/storage/PointerCalculatorFactory.cpp</label>
        <link refid="_pointer_calculator_factory_8cpp"/>
      </node>
      <node id="22891">
        <label>src/lib/access/ProjectionScan.cpp</label>
        <link refid="lib_2access_2_projection_scan_8cpp"/>
      </node>
      <node id="22887">
        <label>src/lib/access/insertonly_merger.cpp</label>
        <link refid="insertonly__merger_8cpp"/>
      </node>
      <node id="22905">
        <label>src/lib/io/MPassCSVLoader.cpp</label>
        <link refid="_m_pass_c_s_v_loader_8cpp"/>
      </node>
      <node id="22870">
        <label>src/lib/access/NestedLoopEquiJoin.cpp</label>
        <link refid="_nested_loop_equi_join_8cpp"/>
      </node>
      <node id="22852">
        <label>src/lib/storage/GroupValue.cpp</label>
        <link refid="_group_value_8cpp"/>
      </node>
      <node id="22866">
        <label>src/bin/perf_regression/SortScan.cpp</label>
        <link refid="bin_2perf__regression_2_sort_scan_8cpp"/>
      </node>
      <node id="22874">
        <label>src/lib/io/Loader.cpp</label>
        <link refid="_loader_8cpp"/>
      </node>
      <node id="22900">
        <label>src/lib/storage/Store.h</label>
        <link refid="_store_8h"/>
        <childnode refid="22901" relation="include">
        </childnode>
        <childnode refid="22902" relation="include">
        </childnode>
        <childnode refid="22903" relation="include">
        </childnode>
        <childnode refid="22904" relation="include">
        </childnode>
        <childnode refid="22874" relation="include">
        </childnode>
        <childnode refid="22905" relation="include">
        </childnode>
        <childnode refid="22906" relation="include">
        </childnode>
        <childnode refid="22897" relation="include">
        </childnode>
        <childnode refid="22851" relation="include">
        </childnode>
        <childnode refid="22894" relation="include">
        </childnode>
        <childnode refid="22907" relation="include">
        </childnode>
        <childnode refid="22899" relation="include">
        </childnode>
      </node>
      <node id="22886">
        <label>src/lib/access/insertonly_valid.h</label>
        <link refid="insertonly__valid_8h"/>
        <childnode refid="22885" relation="include">
        </childnode>
        <childnode refid="22887" relation="include">
        </childnode>
      </node>
      <node id="22845">
        <label>src/lib/storage/Table.h</label>
        <link refid="_table_8h"/>
        <childnode refid="22846" relation="include">
        </childnode>
        <childnode refid="22847" relation="include">
        </childnode>
        <childnode refid="22848" relation="include">
        </childnode>
        <childnode refid="22849" relation="include">
        </childnode>
        <childnode refid="22850" relation="include">
        </childnode>
        <childnode refid="22851" relation="include">
        </childnode>
        <childnode refid="22852" relation="include">
        </childnode>
        <childnode refid="22853" relation="include">
        </childnode>
        <childnode refid="22857" relation="include">
        </childnode>
        <childnode refid="22910" relation="include">
        </childnode>
        <childnode refid="22908" relation="include">
        </childnode>
        <childnode refid="22911" relation="include">
        </childnode>
        <childnode refid="22913" relation="include">
        </childnode>
        <childnode refid="22899" relation="include">
        </childnode>
      </node>
      <node id="22881">
        <label>src/lib/access/Histogram.h</label>
        <link refid="_histogram_8h"/>
        <childnode refid="22882" relation="include">
        </childnode>
        <childnode refid="22849" relation="include">
        </childnode>
        <childnode refid="22883" relation="include">
        </childnode>
      </node>
      <node id="22860">
        <label>src/bin/perf_regression/GroupByScan.cpp</label>
        <link refid="bin_2perf__regression_2_group_by_scan_8cpp"/>
      </node>
      <node id="22864">
        <label>src/bin/perf_regression/ProjectionScan.cpp</label>
        <link refid="bin_2perf__regression_2_projection_scan_8cpp"/>
      </node>
      <node id="22853">
        <label>src/lib/storage/HorizontalTable.h</label>
        <link refid="_horizontal_table_8h"/>
        <childnode refid="22854" relation="include">
        </childnode>
        <childnode refid="22855" relation="include">
        </childnode>
        <childnode refid="22856" relation="include">
        </childnode>
      </node>
      <node id="22916">
        <label>src/lib/storage/TestDataGenerator.cpp</label>
        <link refid="_test_data_generator_8cpp"/>
      </node>
      <node id="22911">
        <label>src/lib/storage/TableFactory.h</label>
        <link refid="_table_factory_8h"/>
        <childnode refid="22874" relation="include">
        </childnode>
        <childnode refid="22857" relation="include">
        </childnode>
        <childnode refid="22912" relation="include">
        </childnode>
        <childnode refid="22899" relation="include">
        </childnode>
      </node>
      <node id="22885">
        <label>src/lib/access/insertonly.cpp</label>
        <link refid="insertonly_8cpp"/>
      </node>
      <node id="22898">
        <label>src/lib/storage/storage_types_helper.cpp</label>
        <link refid="storage__types__helper_8cpp"/>
      </node>
      <node id="22861">
        <label>src/bin/perf_regression/HashJoin.cpp</label>
        <link refid="_hash_join_8cpp"/>
      </node>
      <node id="22851">
        <label>src/lib/storage/AbstractTable.cpp</label>
        <link refid="_abstract_table_8cpp"/>
      </node>
      <node id="22855">
        <label>src/lib/access/UnionScan.cpp</label>
        <link refid="lib_2access_2_union_scan_8cpp"/>
      </node>
      <node id="22876">
        <label>src/lib/storage/PointerCalculator.h</label>
        <link refid="_pointer_calculator_8h"/>
        <childnode refid="22877" relation="include">
        </childnode>
        <childnode refid="22878" relation="include">
        </childnode>
        <childnode refid="22879" relation="include">
        </childnode>
        <childnode refid="22880" relation="include">
        </childnode>
        <childnode refid="22881" relation="include">
        </childnode>
        <childnode refid="22884" relation="include">
        </childnode>
        <childnode refid="22885" relation="include">
        </childnode>
        <childnode refid="22886" relation="include">
        </childnode>
        <childnode refid="22888" relation="include">
        </childnode>
        <childnode refid="22889" relation="include">
        </childnode>
        <childnode refid="22890" relation="include">
        </childnode>
        <childnode refid="22858" relation="include">
        </childnode>
        <childnode refid="22868" relation="include">
        </childnode>
        <childnode refid="22870" relation="include">
        </childnode>
        <childnode refid="22891" relation="include">
        </childnode>
        <childnode refid="22872" relation="include">
        </childnode>
        <childnode refid="22873" relation="include">
        </childnode>
        <childnode refid="22892" relation="include">
        </childnode>
        <childnode refid="22850" relation="include">
        </childnode>
        <childnode refid="22893" relation="include">
        </childnode>
        <childnode refid="22854" relation="include">
        </childnode>
        <childnode refid="22855" relation="include">
        </childnode>
        <childnode refid="22894" relation="include">
        </childnode>
        <childnode refid="22895" relation="include">
        </childnode>
        <childnode refid="22896" relation="include">
        </childnode>
        <childnode refid="22899" relation="include">
        </childnode>
      </node>
      <node id="22896">
        <label>src/lib/storage/storage_types_helper.h</label>
        <link refid="storage__types__helper_8h"/>
        <childnode refid="22897" relation="include">
        </childnode>
        <childnode refid="22851" relation="include">
        </childnode>
        <childnode refid="22852" relation="include">
        </childnode>
        <childnode refid="22898" relation="include">
        </childnode>
      </node>
      <node id="22873">
        <label>src/lib/access/SimpleRawTableScan.cpp</label>
        <link refid="_simple_raw_table_scan_8cpp"/>
      </node>
      <node id="22913">
        <label>src/lib/storage/TableGenerator-impl.h</label>
        <link refid="_table_generator-impl_8h"/>
        <childnode refid="22914" relation="include">
        </childnode>
      </node>
      <node id="22854">
        <label>src/lib/access/UnionAll.cpp</label>
        <link refid="_union_all_8cpp"/>
      </node>
      <node id="22862">
        <label>src/bin/perf_regression/HashValueJoin.cpp</label>
        <link refid="_hash_value_join_8cpp"/>
      </node>
      <node id="22902">
        <label>src/lib/access/LayoutTable.cpp</label>
        <link refid="_layout_table_8cpp"/>
      </node>
      <node id="22908">
        <label>src/lib/storage/TableBuilder.cpp</label>
        <link refid="_table_builder_8cpp"/>
      </node>
      <node id="22859">
        <label>src/lib/access.h</label>
        <link refid="access_8h"/>
        <childnode refid="22860" relation="include">
        </childnode>
        <childnode refid="22861" relation="include">
        </childnode>
        <childnode refid="22862" relation="include">
        </childnode>
        <childnode refid="22863" relation="include">
        </childnode>
        <childnode refid="22864" relation="include">
        </childnode>
        <childnode refid="22865" relation="include">
        </childnode>
        <childnode refid="22866" relation="include">
        </childnode>
        <childnode refid="22867" relation="include">
        </childnode>
      </node>
      <node id="22915">
        <label>src/lib/io/ValidityTableGeneration.cpp</label>
        <link refid="_validity_table_generation_8cpp"/>
      </node>
      <node id="22846">
        <label>src/lib/access/ExpressionScan.cpp</label>
        <link refid="_expression_scan_8cpp"/>
      </node>
      <node id="22909">
        <label>src/lib/storage/TableGenerator.cpp</label>
        <link refid="_table_generator_8cpp"/>
      </node>
      <node id="22865">
        <label>src/bin/perf_regression/SimpleTableScan.cpp</label>
        <link refid="bin_2perf__regression_2_simple_table_scan_8cpp"/>
      </node>
      <node id="22888">
        <label>src/lib/access/InsertOnlyOperators.cpp</label>
        <link refid="_insert_only_operators_8cpp"/>
      </node>
      <node id="22903">
        <label>src/lib/access/MergeTable.cpp</label>
        <link refid="_merge_table_8cpp"/>
      </node>
      <node id="22892">
        <label>src/lib/access/SimpleTableScan.cpp</label>
        <link refid="lib_2access_2_simple_table_scan_8cpp"/>
      </node>
      <node id="22844">
        <label>src/lib/storage/Table-impl.h</label>
        <link refid="Table-impl.h"/>
        <childnode refid="22845" relation="include">
        </childnode>
      </node>
      <node id="22884">
        <label>src/lib/access/IndexScan.cpp</label>
        <link refid="_index_scan_8cpp"/>
      </node>
      <node id="22848">
        <label>src/lib/access/MaterializingScan.cpp</label>
        <link refid="_materializing_scan_8cpp"/>
      </node>
      <node id="22889">
        <label>src/lib/access/IntersectPositions.cpp</label>
        <link refid="_intersect_positions_8cpp"/>
      </node>
      <node id="22890">
        <label>src/lib/access/JoinScan.cpp</label>
        <link refid="lib_2access_2_join_scan_8cpp"/>
      </node>
      <node id="22878">
        <label>src/lib/access/Distinct.cpp</label>
        <link refid="_distinct_8cpp"/>
      </node>
      <node id="22877">
        <label>src/lib/access/CreateIndex.cpp</label>
        <link refid="_create_index_8cpp"/>
      </node>
    </invincdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2012<sp/>Hasso-Plattner-Institut<sp/>fuer<sp/>Softwaresystemtechnik<sp/>GmbH.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SRC_LIB_STORAGE_TABLE_IMPL_H_</highlight></codeline>
<codeline lineno="3"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>SRC_LIB_STORAGE_TABLE_IMPL_H_</highlight></codeline>
<codeline lineno="4"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_attribute_vector_factory_8h" kindref="compound">storage/AttributeVectorFactory.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><ref refid="_abstract_allocated_table_8h_1a49b656c927f9e4a6749b39ceed291418" kindref="member">ALLOC_FUNC_TEMPLATE</ref></highlight></codeline>
<codeline lineno="9"><highlight class="normal">Table&lt;Strategy,<sp/>Allocator&gt;::Table(</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/>std::vector&lt;const<sp/>ColumnMetadata<sp/>*&gt;<sp/>*m,</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/>std::vector&lt;SharedDictionary&gt;<sp/>*d,</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>initial_size,</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sorted,</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>padding_size,</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>_align_size,</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>compressed)<sp/>:</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/>_metadata(m-&gt;size()),</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/>_dictionaries(m-&gt;size()),</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/>width(m-&gt;size()),</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>align_size(_align_size),</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>_compressed(compressed)<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ownership<sp/>change<sp/>for<sp/>meta<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>width;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>_metadata[i]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_column_metadata" kindref="compound">ColumnMetadata</ref>(*m-&gt;at(i));</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>pass<sp/>dictionaries,<sp/>reuses<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_store_1a85c3ab730b3d083f79eeacc5110ddf49" kindref="member">std::copy</ref>(d-&gt;begin(),<sp/>d-&gt;end(),<sp/>_dictionaries.begin());</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otheriwse<sp/>create<sp/>new<sp/>dictionaries<sp/>based<sp/>on<sp/>the<sp/>met<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>_dictionaries.resize(width);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>create<sp/>dictionaries<sp/>if<sp/>they<sp/>can<sp/>be<sp/>used,<sp/>sorted<sp/>dictionaries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>empty<sp/>tables<sp/>is<sp/>not<sp/>useful</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sorted)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>width;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dictionaries[i]<sp/>=<sp/><ref refid="class_abstract_dictionary_1a051863f8c78b2312e92705eb3554f156" kindref="member">AbstractDictionary::dictionaryWithType</ref><sp/>&lt;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_dictionary_factory" kindref="compound">DictionaryFactory&lt;OrderIndifferentDictionary, Strategy, Allocator&gt;</ref><sp/>&gt;<sp/>(</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_metadata[i]-&gt;getType(),<sp/>initial_size);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>byte_width<sp/>=<sp/>width<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="storage__types_8h_1a2552a37cd3427c39d92cb8fd23c90408" kindref="member">value_id_t</ref>);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(padding_size<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>byte_width<sp/>=<sp/>byte_width<sp/>+<sp/>padding_size<sp/>-<sp/>byte_width<sp/>%<sp/>padding_size;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sorted)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>tuples<sp/>=<sp/>AttributeVectorFactory::getAttributeVector&lt;value_id_t,<sp/>Allocator&lt;value_id_t,<sp/>Strategy&gt;<sp/>&gt;(width,<sp/>initial_size);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;uint64_t&gt;<sp/>bits(_dictionaries.size(),<sp/>0);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>_dictionaries.size();<sp/>++i)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bits[i]<sp/>=<sp/>_dictionaries[i]-&gt;<ref refid="class_store_1a7a16ab17df15f50f605a4243d993d928" kindref="member">size</ref>()<sp/>==<sp/>1<sp/>?<sp/>1<sp/>:<sp/>ceil(log(_dictionaries[i]-&gt;<ref refid="class_store_1a7a16ab17df15f50f605a4243d993d928" kindref="member">size</ref>())<sp/>/<sp/>log(2.0));</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>tuples<sp/>=<sp/>AttributeVectorFactory::getAttributeVector2&lt;value_id_t,<sp/>Allocator&lt;value_id_t,<sp/>Strategy&gt;<sp/>&gt;(width,<sp/>initial_size,<sp/>compressed,<sp/>bits);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><ref refid="_abstract_allocated_table_8h_1a49b656c927f9e4a6749b39ceed291418" kindref="member">ALLOC_FUNC_TEMPLATE</ref></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><ref refid="namespacehyrise_1_1storage_1a21d5e900c20019710828c453eaded1ee" kindref="member">hyrise::storage::atable_ptr_t</ref><sp/>Table&lt;Strategy,<sp/>Allocator&gt;::copy_structure(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="storage__types_8h_1a36fbc31395a53b7ece189846e4d3253c" kindref="member">field_list_t</ref><sp/>*fields,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>reuse_dict,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>initial_size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>with_containers,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>compressed)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>std::vector&lt;const<sp/>ColumnMetadata<sp/>*&gt;<sp/>metadata;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>std::vector&lt;AbstractTable::SharedDictionaryPtr&gt;<sp/>*dictionaries<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reuse_dict)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>dictionaries<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>std::vector&lt;AbstractTable::SharedDictionaryPtr&gt;();</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fields<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="storage__types_8h_1a5ce4ecb27464dc24ba394527510dd89b" kindref="member">field_t</ref><sp/>&amp;<sp/>field:<sp/>*fields)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>metadata.push_back(metadataAt(field));</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dictionaries<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dictionaries-&gt;push_back(dictionaryAt(field));</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>columnCount();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>metadata.push_back(metadataAt(i));</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dictionaries<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dictionaries-&gt;push_back(dictionaryAt(i));</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>res<sp/>=<sp/><sp/>std::make_shared&lt;Table&lt;&gt;&gt;(&amp;metadata,<sp/>dictionaries,<sp/>initial_size,</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/><ref refid="_table_8h_1aa1e69ab12f7d76d260eb93c6291670f0" kindref="member">STORAGE_ALIGNMENT_SIZE</ref>,<sp/>align_size,<sp/>compressed);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>dictionaries;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><ref refid="_abstract_allocated_table_8h_1a49b656c927f9e4a6749b39ceed291418" kindref="member">ALLOC_FUNC_TEMPLATE</ref></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><ref refid="namespacehyrise_1_1storage_1a21d5e900c20019710828c453eaded1ee" kindref="member">hyrise::storage::atable_ptr_t</ref><sp/>Table&lt;Strategy,<sp/>Allocator&gt;::copy_structure_modifiable(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="storage__types_8h_1a36fbc31395a53b7ece189846e4d3253c" kindref="member">field_list_t</ref><sp/>*fields,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>initial_size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>with_containers)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>std::vector&lt;const<sp/>ColumnMetadata<sp/>*&gt;<sp/>metadata;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>std::vector&lt;AbstractTable::SharedDictionaryPtr<sp/>&gt;<sp/>*dictionaries<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>std::vector&lt;AbstractTable::SharedDictionaryPtr<sp/>&gt;;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fields<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="storage__types_8h_1a5ce4ecb27464dc24ba394527510dd89b" kindref="member">field_t</ref><sp/>&amp;<sp/>field:<sp/>*fields)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>metadata.push_back(metadataAt(field));</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dictionaries-&gt;push_back(<ref refid="class_abstract_dictionary_1a051863f8c78b2312e92705eb3554f156" kindref="member">AbstractDictionary::dictionaryWithType</ref>&lt;<ref refid="struct_dictionary_factory" kindref="compound">DictionaryFactory&lt;OrderIndifferentDictionary&gt;</ref><sp/>&gt;(metadataAt(field)-&gt;getType()));</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>columnCount();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>metadata.push_back(metadataAt(i));</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dictionaries-&gt;push_back(<ref refid="class_abstract_dictionary_1a051863f8c78b2312e92705eb3554f156" kindref="member">AbstractDictionary::dictionaryWithType</ref>&lt;<ref refid="struct_dictionary_factory" kindref="compound">DictionaryFactory&lt;OrderIndifferentDictionary&gt;</ref><sp/>&gt;(metadataAt(i)-&gt;getType()));</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>std::make_shared&lt;Table&lt;&gt;&gt;(&amp;metadata,<sp/>dictionaries,<sp/>initial_size,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_table_8h_1aa1e69ab12f7d76d260eb93c6291670f0" kindref="member">STORAGE_ALIGNMENT_SIZE</ref>,<sp/>align_size,<sp/>_compressed);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>dictionaries;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><ref refid="_abstract_allocated_table_8h_1a49b656c927f9e4a6749b39ceed291418" kindref="member">ALLOC_FUNC_TEMPLATE</ref></highlight></codeline>
<codeline lineno="130"><highlight class="normal">Table&lt;Strategy,<sp/>Allocator&gt;::~Table()<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>m:<sp/>_metadata)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><ref refid="_abstract_allocated_table_8h_1a49b656c927f9e4a6749b39ceed291418" kindref="member">ALLOC_FUNC_TEMPLATE</ref></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Table&lt;Strategy,<sp/>Allocator&gt;::size()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tuples-&gt;size();</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><ref refid="_abstract_allocated_table_8h_1a49b656c927f9e4a6749b39ceed291418" kindref="member">ALLOC_FUNC_TEMPLATE</ref></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Table&lt;Strategy,<sp/>Allocator&gt;::columnCount()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>width;</highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><ref refid="_abstract_allocated_table_8h_1a49b656c927f9e4a6749b39ceed291418" kindref="member">ALLOC_FUNC_TEMPLATE</ref></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><ref refid="class_value_id" kindref="compound">ValueId</ref><sp/>Table&lt;Strategy,<sp/>Allocator&gt;::getValueId(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>column,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>row)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>assert(column<sp/>&lt;<sp/>width);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><ref refid="class_value_id" kindref="compound">ValueId</ref><sp/>valueId;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>valueId.<ref refid="class_value_id_1aba4b7fbd1c7acac6ae904e2e5862c7af" kindref="member">valueId</ref><sp/>=<sp/>tuples-&gt;get(column,<sp/>row);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>valueId.<ref refid="class_value_id_1acb1b09f9c1ba2d8866a5886afed1a13d" kindref="member">table</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>valueId;</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><ref refid="_abstract_allocated_table_8h_1a49b656c927f9e4a6749b39ceed291418" kindref="member">ALLOC_FUNC_TEMPLATE</ref></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Table&lt;Strategy,<sp/>Allocator&gt;::setValueId(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>column,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>row,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_value_id" kindref="compound">ValueId</ref><sp/>valueId)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>assert(column<sp/>&lt;<sp/>width);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>tuples-&gt;set(column,<sp/>row,<sp/>valueId.<ref refid="class_value_id_1aba4b7fbd1c7acac6ae904e2e5862c7af" kindref="member">valueId</ref>);</highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><ref refid="_abstract_allocated_table_8h_1a49b656c927f9e4a6749b39ceed291418" kindref="member">ALLOC_FUNC_TEMPLATE</ref></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Table&lt;Strategy,<sp/>Allocator&gt;::reserve(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nr_of_values)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nr_of_values<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>tuples-&gt;reserve(nr_of_values);</highlight></codeline>
<codeline lineno="166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><ref refid="_abstract_allocated_table_8h_1a49b656c927f9e4a6749b39ceed291418" kindref="member">ALLOC_FUNC_TEMPLATE</ref></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Table&lt;Strategy,<sp/>Allocator&gt;::resize(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rows)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>tuples-&gt;resize(rows);</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><ref refid="_abstract_allocated_table_8h_1a49b656c927f9e4a6749b39ceed291418" kindref="member">ALLOC_FUNC_TEMPLATE</ref></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_column_metadata" kindref="compound">ColumnMetadata</ref><sp/>*Table&lt;Strategy,<sp/>Allocator&gt;::metadataAt(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>column,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>row_index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="storage__types_8h_1ab1b21fbdc9fcb935021666db9c910755" kindref="member">table_id_t</ref><sp/>table_id)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_metadata.at(column);</highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><ref refid="_abstract_allocated_table_8h_1a49b656c927f9e4a6749b39ceed291418" kindref="member">ALLOC_FUNC_TEMPLATE</ref></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_abstract_table_1af76ff827deb697db8077a90c450381ab" kindref="member">AbstractTable::SharedDictionaryPtr</ref>&amp;<sp/>Table&lt;Strategy,<sp/>Allocator&gt;::dictionaryAt(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>column,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>row,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="storage__types_8h_1ab1b21fbdc9fcb935021666db9c910755" kindref="member">table_id_t</ref><sp/>table_id,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>of_delta)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_dictionaries[column];</highlight></codeline>
<codeline lineno="181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><ref refid="_abstract_allocated_table_8h_1a49b656c927f9e4a6749b39ceed291418" kindref="member">ALLOC_FUNC_TEMPLATE</ref></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_abstract_table_1af76ff827deb697db8077a90c450381ab" kindref="member">AbstractTable::SharedDictionaryPtr</ref>&amp;<sp/>Table&lt;Strategy,<sp/>Allocator&gt;::dictionaryByTableId(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>column,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="storage__types_8h_1ab1b21fbdc9fcb935021666db9c910755" kindref="member">table_id_t</ref><sp/>table_id)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_dictionaries[column];</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><ref refid="_abstract_allocated_table_8h_1a49b656c927f9e4a6749b39ceed291418" kindref="member">ALLOC_FUNC_TEMPLATE</ref></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Table&lt;Strategy,<sp/>Allocator&gt;::setDictionaryAt(<ref refid="class_abstract_table_1af76ff827deb697db8077a90c450381ab" kindref="member">AbstractTable::SharedDictionaryPtr</ref><sp/>dict,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>column,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>row,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="storage__types_8h_1ab1b21fbdc9fcb935021666db9c910755" kindref="member">table_id_t</ref><sp/>table_id)<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Swap<sp/>the<sp/>dictionaries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_dictionaries[column]<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>||<sp/>_dictionaries[column]-&gt;size()<sp/>!=<sp/>dict-&gt;size())<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Rewrite<sp/>the<sp/>doc<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>tuples-&gt;rewriteColumn(column,<sp/>dict-&gt;size()<sp/>==<sp/>1<sp/>?<sp/>1<sp/>:<sp/>ceil(log(dict-&gt;size())<sp/>/<sp/>log(2)));</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>_dictionaries[column]<sp/>=<sp/>dict;</highlight></codeline>
<codeline lineno="197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><ref refid="_abstract_allocated_table_8h_1a49b656c927f9e4a6749b39ceed291418" kindref="member">ALLOC_FUNC_TEMPLATE</ref></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Table&lt;Strategy,<sp/>Allocator&gt;::setAttributes(SharedAttributeVector<sp/>doc)<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>tuples<sp/>=<sp/>doc;</highlight></codeline>
<codeline lineno="203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><ref refid="_abstract_allocated_table_8h_1a49b656c927f9e4a6749b39ceed291418" kindref="member">ALLOC_FUNC_TEMPLATE</ref></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><ref refid="namespacehyrise_1_1storage_1a21d5e900c20019710828c453eaded1ee" kindref="member">hyrise::storage::atable_ptr_t</ref><sp/>Table&lt;Strategy,<sp/>Allocator&gt;::copy()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>new_table<sp/>=<sp/>std::make_shared&lt;table_type&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>std::vector&lt;const<sp/>ColumnMetadata<sp/>*&gt;(_metadata.begin(),<sp/>_metadata.end()));</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>new_table-&gt;width<sp/>=<sp/>width;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>new_table-&gt;byte_width<sp/>=<sp/>byte_width;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>new_table-&gt;align_size<sp/>=<sp/>align_size;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>new_table-&gt;setGeneration(this-&gt;generation());</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>SharedAttributeVector<sp/>new_tuples<sp/>=<sp/>tuples-&gt;copy();</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>new_table-&gt;setAttributes(new_tuples);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>dictionaries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dictIndex<sp/>=<sp/>0;<sp/>dictIndex<sp/>&lt;<sp/>_dictionaries.size();<sp/>++dictIndex)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>new_dict<sp/>=<sp/>_dictionaries[dictIndex]-&gt;copy();</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>new_table-&gt;setDictionaryAt(new_dict,<sp/>dictIndex);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_table;</highlight></codeline>
<codeline lineno="224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>SRC_LIB_STORAGE_TABLE_IMPL_H_</highlight></codeline>
<codeline lineno="228"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/grund/hyrise/src/lib/storage/Table-impl.h"/>
  </compounddef>
</doxygen>
